import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';

import * as M from "materialize-css/dist/js/materialize";
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { formatDate } from "@angular/common";
import { Input } from "@angular/core";
import { CompleterService, CompleterData, RemoteData, CompleterItem } from 'ng2-completer';
import { Output } from "@angular/core";
import { EventEmitter } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { UtilityService } from '../../../services/utility.service';
import { ToastService, WidgetService, SessionService } from '@nw-workspace/common-services';
import { ApprovalAssignmentDTO } from '../../../model/ApprovalAssignmentDTO';
import { DependentFieldsDTO } from '../../../model/DependentFieldsDTO';
import { DIEngineDTO } from '../../../model/DIEngineDTO';
import { GenerationServiceDTO } from '../../../model/GenerationServiceDTO';
import { EmployeeService } from '../../../services/employee.service';
import { MdmService } from '../../../services/mdm.service';
import { SdmService } from '../../../services/sdm.service';
import { CandidateFilterDTO } from '../../../model/CandidateFilterDTO';
import { environment } from 'projects/hub/src/environments/environment.prod';
import { CreateEmployeeModule } from '../create-employee/create-employee.module'
import { ActivatedRoute } from '@angular/router';

declare var require: any;

declare var $: any;

@Component({
    selector: 'app-create-template',
    templateUrl: './create-template.component.html',
    styleUrls: ['./create-template.component.css']
})

export class CreateTemplateComponent implements OnInit {
    
    deltaDIObj: any = {};
    validationMsg: boolean;
    deltaData: any = {};
    selectMDMDataLoader: any = {};
    nationalIdValidation: boolean;
    neosuiteNotifications: any;
    fieldArray: any = [];
    duplicateInfo: any;
    preferredLang: any;
    duplicate: any;
    apiCode: any;
    duplicateCheckValues: any = [];
    deleteDraftsList: any = []
    employeeCreationInProcess: any;
    newDataDisplayNames: any = {};
    oldDataDisplayNames: any = {};
    actionList: any = [];
    eventList: any = [];
    notification: any;
    createConfigurableModalFlag: boolean = false;
    createConfigurableFields: any = [];
    mdmautoloading: boolean = false;
    formId: any;
    draftViewModalOpen: boolean;
    currentDraft: any;
    draftsList: any = [];
    selectedEventFromFormView: any;
    draftName: any;
    employeeData: any;
    saveForLater: boolean;
    formFileData: any;
    updatedData: any;
    oldData: any;
    data: any;
    showEvent: boolean = false;
    selectedEvent: any;
    additionalValue: { "featureCode": string; "customFieldsFirst": any; };
    events: any;
    activateSaveButton: boolean = false;
    form_data: FormData;
    downloadButton: boolean = false;
    loaded: boolean = false;
    selTab: number = 0;
    tabProfileExpanded: boolean = false;
    currentSpoc: any = {};
    imgsrc: string;
    fileDataInput: any = {};
    contentType: string;
    fieldIndex: any;
    source: any;
    fieldCode: any;
    fetchfiles: any = {
        fileName: null
    };
    url: any;
    documentPath: any;
    attachmentView: boolean;
    attachments: any = [];
    filePathKeys: any = {};
    filePathData: {};
    fileInfo: any = {};
    fileList: any[] = [];
    fieldAttachments: any = {};
    files: any = {};
    newFiles: any = [];
    document: any = {};
    generationServiceDTOList: GenerationServiceDTO[] = [];
    employeeIdseries: any;
    globalIdSeries: any;
    structData: {};
    sourceFieldMap: {};
    tabHide: boolean;
    oneToManyFieldValue: boolean;
    oneToManyField: boolean[] = [];
    obj: any;
    sourceAndValues: any = {};
    pexSliceTab: number = 0;
    autoGeneratedGlobalId: any;
    diOutputForGlobalId: any;
    modalMode2: boolean;
    modalInstanceGlobal: any;
    globalIdType: any;
    field: any;
    one2ManyAutoComplete: any = [];
    o2MAuto: any = {};
    one2ManyDateTimeFields: any = [];
    dateTimeFields: any = [];
    one2ManyDateFields: any = [];
    appCode1: any;
    fieldName: string;
    parentdata: object = new Object();
    approvalRequest: ApprovalAssignmentDTO = new ApprovalAssignmentDTO();
    dependentFieldsDTO: DependentFieldsDTO = new DependentFieldsDTO();
    dependentFieldCodes: any = [];
    dependentFieldsDTOList: DependentFieldsDTO[];
    dependentFieldss: any = [];
    totalFields: any = [];
    parentFields: any = [];
    parentField: any;
    updatedMDMData: any;
    sourceList: any = [];
    widgetDetail: any;
    suggestions: any = [];
    autoComplete: any = [];
    mdmFields: any = [];
    selectMDMData: any = {};
    modalMode: boolean;
    employeeIdModalManual: boolean;
    employeeIdModalBoth: boolean;
    modalInstance: any;
    diInputList: any;
    employeeIdModalAutoGenerated: boolean;
    count: number = 0;
    generationServiceDTO: GenerationServiceDTO = new GenerationServiceDTO();
    series: string;
    autoGeneratedEmployeeId: any;
    diOutputList: any = [];
    diOutput: any;
    seriesList: any = [];
    employeeIdType: any;
    pexTabLevel: number = 0;
	loadCandidate: boolean=false;
    pexSlice: number = 0;
    tabExpanded: boolean = false;
    appRole: any;
    api3: any;
    api2: any;
    api1: any;
    fieldConfiguration: any = {};
    selectData: any = {};
    dateFields: any = [];
    sdmCodes: any = [];
    fields: any;
    columnmap: any;
    group: any;
    configuration: any;
    sdmValue: any;
    widgetWidth: number;
    employeeDTO: any = {};
    loader: boolean;
    loading: boolean;
    appRoles: any;
    role: any;
    allMyWidgets: any;
    module: any
    fieldSdmMap: Map<string, string> = new Map();
    app: any;
    dIEngineDTO: DIEngineDTO = new DIEngineDTO();
    headers: HttpHeaders = new HttpHeaders();
    options: { headers: HttpHeaders; };
    dynamicInputVariable: any = {};
    flowCode: any;
    convoAI: boolean = false;


	candidateAPI: string = "";
	checkToggle: boolean = false;
	showOptions: boolean = true;
	candidateValue: string = "";
	enteredValue: string = "";
	candidateOption = ["Global Employee ID", "National ID", "Phone Number"];
	cEmployee: boolean = true;
	candidate: boolean = false;
	dataPresent: boolean = false;
	loader1 : boolean = false;
	showRight: boolean = true;
    showLoadCandidate: boolean = false;
	candidateFilterDTO: CandidateFilterDTO = new CandidateFilterDTO();
    cdnUrl = environment.cdnPath;
    showBackButton: boolean;

    @ViewChild("createEmployee", { static: true }) createEmployee: ElementRef;
    @ViewChild("pexNewCreateTab", { static: false }) pexNewCreateTab: ElementRef;
    @Input("createEmployeePage") createEmployeePage: boolean;
    @Input("formCode") formCode: any;
    @Input("keyRestrictions") keyRestrictions: any={};
    @Input("appCode") appCode: any;
    @Input("widgetCode") widgetCode: any;
    @Input("component") component: any;
    @Output() nameEvent = new EventEmitter<boolean>();

    constructor(private sanitizer: DomSanitizer, private toastService: ToastService, private http: HttpClient, private widgetService: WidgetService, private sessionService: SessionService, private completerService: CompleterService, private utilityService: UtilityService, private mdmService: MdmService, private sdmService: SdmService, private employeeService: EmployeeService, private router: ActivatedRoute) { }

    ngOnInit() {
        debugger
        this.widgetService.selectedWidget$.subscribe(myWid => {
            this.widgetDetail = myWid;
            if(this.widgetDetail.widgetPath == "CreateEmployeeComponent") {
              this.showBackButton = true;
              this.widgetDetail = null;
            }
            else
              this.showBackButton = false;
              
        })
        //this.getWidgetDetails();
        this.preferredLang = this.sessionService.getCurrentUser().additionalDetails.mdm.preferredLang;
        this.keyRestrictions["loggedInUser"] = this.sessionService.getCurrentUser().preferred_username
        console.log( this.keyRestrictions)

        if (this.widgetDetail != undefined && this.widgetDetail != null) {
            this.appCode = this.widgetDetail.application.appCode;
            this.widgetCode = this.widgetDetail.widgetCode;
            this.fetchWidgetComponent();
        }
        else {
            this.headers = this.headers.append('App-Code', this.appCode);
            this.headers = this.headers.append('Component', this.component);
            this.options = { headers: this.headers };
        }

        this.fetchEventsByRole(this.keyRestrictions);
        this.fetchWidgetsRole();
    }
    
    /* getWidgetDetails() {
        let activeWidget
        if(this.utilityService.isNotNullOrEmptyOrUndefined(this.router.snapshot.url)) {
           activeWidget = "hubcreatetemplatecomponent/" + this.router.snapshot.url[0].path;

        this.widgetService.currentWidgets.subscribe(widgets => {
            //console.table(widgets)
            for(let singleWidget of widgets) {
             if(singleWidget.routePath == activeWidget) {
             this.widgetDetail = singleWidget;
             break
             //console.log(singleWidget);
             }
            }
         
     })
    }
    } */

    
    ngAfterViewInit() {
        var elementResizeDetectorMaker = require("element-resize-detector");
        var erdUltraFast = elementResizeDetectorMaker({
            strategy: "scroll" //<- For ultra performance.
        });

        erdUltraFast.listenTo(document.getElementById("createDiv"), element => {
            this.onResizedEvent(element);
        });
    }

    

    isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    fetchEventForm() {
		debugger
		
        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.createConfigurableFields) && !this.loadCandidate) {
            if (!this.createConfigurableFieldValidation()) {
                return false;
            }
        }
		

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.employeeData)) {
            for (var key in this.employeeData) {
                if (this.utilityService.isNotNullOrEmptyOrUndefined(this.employeeData[key])) {
                    this.dynamicInputVariable[key] = this.employeeData[key];
                }
            }
        } else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.createConfigurableFields)) {
                for (var singleConfigurableField of this.createConfigurableFields) {
                    if (this.utilityService.isNotNullOrEmptyOrUndefined(singleConfigurableField.fieldName)) {
                        if (this.utilityService.isNotNullOrEmptyOrUndefined(singleConfigurableField.fieldValue)) {
                            this.employeeData[singleConfigurableField.fieldName] = singleConfigurableField.fieldValue;
                        }
                    }
                }
            }
        }
        
        this.additionalValue = {
            "featureCode": "create",
            "customFieldsFirst": null
        }

        this.formCode = this.selectedEvent.formCode;
        this.flowCode = this.selectedEvent.flowCode;

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.selectedEvent.notification)) {
            this.notification = this.selectedEvent.notification
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.selectedEvent.neosuiteNotifications)) {
            this.neosuiteNotifications = this.selectedEvent.neosuiteNotifications
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.selectedEvent.validationMsg)) {
            this.validationMsg = this.selectedEvent.validationMsg;
        }

        setTimeout(() => {
            this.showEvent = true;
        }, 10);

        if (this.draftViewModalOpen) {
            this.closeDraftViewModal();
        }

        if (this.createConfigurableModalFlag) {
            this.closeConfigurableFieldsModal();
        }
    }


    fetchEventsByRole(keyRestrictions) {
		debugger;
		//console.log(keyRestrictions)

        let url = "employee-forms?component=" + this.component;
        if(this.utilityService.isNotNullOrEmptyOrUndefined(keyRestrictions.countryCode)) {
            url = url.concat("&countryCode=" + keyRestrictions.countryCode);
            if(this.utilityService.isNotNullOrEmptyOrUndefined(keyRestrictions.countryCode)) {
                url = url.concat("&businessunitCode=" + keyRestrictions.businessunitCode);
            }
        }
        //url = url.concat("&employeeGlobalId="+ this.keyRestrictions.employeeGlobalId)
        
        this.http.get<any>(url, this.options).subscribe(data => {
            this.eventList = data.payload.events;
            this.actionList = data.payload.actions;

            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.eventList)) {
                this.eventList = this.sortEvents(this.eventList);
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.actionList)) {
                this.actionList = this.sortEvents(this.actionList);
            }
        })
    }

    fetchWidgetComponent() {
        this.http.get<any>("widget/mapping?componentType=create&widgetCode=" + this.widgetCode).subscribe(data => {
            if (data.payload != null) {
                this.loaded = true;
                this.component = data.payload.widgetComponent;
                this.initView();

                this.headers = this.headers.append('App-Code', this.appCode);
                this.headers = this.headers.append('Component', this.component);
                this.options = { headers: this.headers };

                this.fetchEventsByRole(this.keyRestrictions);
            }
        });
    }


    initView() {
        this.pageRefresh();
        $('.modal').modal();

        var elems = document.getElementById("viewEmployeeIdModal");
        this.modalInstance = M.Modal.init(elems, {});

        var elem = document.getElementById("viewGlobalIdModal");
        this.modalInstanceGlobal = M.Modal.init(elem, {});

        var elementResizeDetectorMaker = require("element-resize-detector");
        var erdUltraFast = elementResizeDetectorMaker({
            strategy: "scroll" //<- For ultra performance.
        });
        erdUltraFast.listenTo(document.getElementById("createDiv"), element => {
            this.onResizedEvent(element);
            this.refresh();
        });

    }

    pageRefresh() {
        this.url = null;
        this.downloadButton = false;

        setTimeout(() => {
            $('select').formSelect();
            var elems = document.querySelectorAll('.datepicker');
            var instances = M.Datepicker.init(elems, { format: 'yyyy-mm-dd' });
        }, 300);

        this.fetchfiles = {}

    }

    selectRefresh() {
        setTimeout(function () {
            $('select').formSelect();
            var elems = document.querySelectorAll('.datepicker');
            var instances = M.Datepicker.init(elems, { format: 'yyyy-mm-dd' });
            M.updateTextFields();
        }, 1000);
    }

    refresh() {
        setTimeout(function () {
            $('select').formSelect();
            var elems = document.querySelectorAll('.datepicker');
            var instances = M.Datepicker.init(elems, { format: 'yyyy-mm-dd' });
        }, 10);
    }

    showEventView() {
		debugger
		this.employeeData = {};

        this.additionalValue = {
            "featureCode": "create",
            "customFieldsFirst": null
        }

        this.formCode = null;
        this.flowCode = null;
        this.selectedEvent = null;
        this.showEvent = false;
		this.candidateFilterDTO = new CandidateFilterDTO();
		this.enteredValue = null;
		this.candidateValue = null;
		this.loader1 = false;
		const ele = document.getElementById("switch") as HTMLInputElement;

		if (this.checkToggle == false) {

			ele.checked = false;

		}

		else { ele.checked = true; }
        this.dynamicInputVariable = {}
        this.employeeCreationInProcess = false;
    }

    back() {
        this.createEmployeePage = false;
        this.nameEvent.emit(true);
        this.pageRefresh();
    }

    onResizedEvent(event) {
        this.widgetWidth = this.widgetService.onResized(event);

        if (this.widgetWidth > 12) {
            this.widgetWidth = 12
        }
    }

    getResponsiveClasses(widgetWidth, classSizeList, defaultClasses) {
        return this.widgetService.getResponsiveClasses(widgetWidth, classSizeList, defaultClasses);
    }

    getHideShow(className, widgetWidth, comparator, startSize, endSize) {
        return this.widgetService.getHideShow(className, widgetWidth, comparator, startSize, endSize);
    }

    saveEmployeeInformation() {
        var dataInjection = JSON.parse(this.selectedEvent.dataInjection);

        for (var [key, value] of Object.entries(dataInjection)) {
            if (dataInjection[key] == 'currentDate') {
                this.employeeDTO[key] = new Date();
            } else {
                this.employeeDTO[key] = dataInjection[key];
            }
        }

        var eventCode = null;
        var actionCode = null;

        var customDataFlow = false;
        var routineId = null;

        var oldApprovalFlowFlag = true;

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.selectedEvent.customDataFlow)) {
            customDataFlow = this.selectedEvent.customDataFlow;
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.selectedEvent.routineId)) {
            routineId = this.selectedEvent.routineId;
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.selectedEvent.eventCode)) {
            eventCode = this.selectedEvent.eventCode;
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.selectedEvent.actionCode)) {
            actionCode = this.selectedEvent.actionCode;
        }

        oldApprovalFlowFlag = this.selectedEvent.oldApprovalFlowFlag;

        this.data.data = this.employeeDTO;
        this.oldData = {};

        var data = { component: this.component, predata: this.oldData, data: this.data.data, formCode: this.formCode, flowCode: this.flowCode, formFileData: this.formFileData, eventId: null, eventCode: eventCode, actionCode: actionCode, updateAPICode: this.data.updateAPICode, formId: this.formId, notification: this.notification, totalFields: this.totalFields, oldDataDisplayNames: this.oldDataDisplayNames, newDataDisplayNames: this.newDataDisplayNames, roleFormId: this.selectedEvent.id, neosuiteNotifications: this.neosuiteNotifications, routineId: routineId, customDataFlow: customDataFlow, deltaData: this.deltaData, deltaDIObj: this.deltaDIObj, oldApprovalFlowFlag: oldApprovalFlowFlag };

        if (this.selectedEvent.deltaApi) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(dataInjection)) {
                for (var [key, value] of Object.entries(dataInjection)) {
                    if (dataInjection[key] == 'currentDate') {
                        if (this.deltaData[key] == undefined)
                            this.deltaData[key] = new Date();
                    } else {
                        if (this.deltaData[key] == undefined)
                            this.deltaData[key] = dataInjection[key];
                    }
                }
            }
            data["data"] = this.deltaData;
        }


        var form_data = new FormData();

        for (var key in this.fileList) {
            for (var file of this.fileList[key])
                form_data.append(key, file);
        }

        form_data.append("widgetDTO", new Blob([JSON.stringify(data)], {
            type: "application/json"
        }));

        // save employee
        this.http.post<any>("employee", form_data, this.options).subscribe(personalData => {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(personalData.payload) && this.utilityService.isNotNullOrEmptyOrUndefined(personalData.payload.autoGeneratedIds)) {
                this.employeeDTO.employeeId = personalData.payload.autoGeneratedIds.autoGeneratedEmployeeId;
                this.employeeDTO.employeeGlobalId = personalData.payload.autoGeneratedIds.autoGeneratedEmployeeGlobalId;
                this.openEmployeeIdModal();
            }else if(this.utilityService.isNotNullOrEmptyOrUndefined(personalData) && personalData.status =="warning") {
                this.employeeCreationInProcess = false;
            }
             else {
                this.employeeDTO = {}
                this.employeeData = {}
				this.keyRestrictions["employeeGlobalId"] = null
                setTimeout(() => {
                    this.showEvent = false;
                }, 10);

                this.fetchEventForm();
            }

            this.employeeCreationInProcess = false;
            form_data = new FormData();

            this.loader = false;
        }, err => {
            var form_data = new FormData();
            this.loader = false;
            this.employeeCreationInProcess = false;
        });
    }

    saveEmployeeProfileByApproval() {
        this.employeeCreationInProcess = true;
        this.fieldArray = [];

        if (this.selectedEventFromFormView == "saveForLater") {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(this.currentDraft)) {
                this.draftName = this.currentDraft.draftName;
            }

            this.openSaveForLaterModal();
            return;
        }

        this.checkDuplicate();
    }

    checkDuplicate() {
		this.loader =  true;
        this.duplicateCheckValues = []
        this.nationalIdValidation = false;
        var duplicketChecks = {}

        if (duplicketChecks == undefined) {
            duplicketChecks = {}
        }

        if (duplicketChecks["field"] == undefined) {
            duplicketChecks["field"] = []
        }

        duplicketChecks["field"] = [
            {
                "fieldName": "firstName",
                "fieldLabel": "First Name"
            },
            {
                "fieldName": "lastName",
                "fieldLabel": "Last Name"
            },
            {
                "fieldName": "employeeGlobalId",
                "fieldLabel": "EmployeeGlobalId"
            },
            {
                "fieldName": "employeeId",
                "fieldLabel": "Employee Id"
            },
            {
                "fieldName": "dateOfBirth",
                "fieldLabel": "Date of Birth"
            }
            ,
            {
                "fieldName": "nationalId",
                "fieldLabel": "NationalID"
            },
            {
                "fieldName": "nationalIdCardType",
                "fieldLabel": "National Id Card"
            },{
                "fieldName": "emailOfficial",
                "fieldLabel": "Email Official"
            }]

        var value = {};
        for (var val of duplicketChecks["field"]) {

            value = {}
            if (value[val["fieldName"]] == undefined) {
                value[val["fieldName"]] = {}
                if (this.utilityService.isNotNullOrEmptyOrUndefined(this.data.data[val["fieldName"]])) {
                    if (typeof this.data.data[val["fieldName"]] != 'object') {
                        value[val["fieldName"]] = this.data.data[val["fieldName"]];
                        this.duplicateCheckValues.push(value)
                    } else {
                        for(let i in this.data.data.nationalId) {
                        value[val["fieldName"]] = this.data.data["nationalId"][i][val["fieldName"]];
                        var nationalIdArray = {
                            "nationalId" : this.data.data["nationalId"][i][val["fieldName"]],
                            "nationalIdCardType" : this.data.data["nationalId"][i]["nationalIdCardType"]
                        }
                        this.duplicateCheckValues.push(nationalIdArray)
                        }
                    }
                }
            }
        }

        for (var value1 of duplicketChecks["field"]) {
            this.fieldArray.push(value1)
        }

        var duplicatedate = {
            "field": this.duplicateCheckValues,
        }

        this.http.post<any>("employee/check", duplicatedate, this.options).subscribe(personalData => {
            this.duplicateInfo = personalData.payload.list;

            this.getDateConvert();
            this.loader = false;

            if (this.utilityService.isNotNullOrEmptyOrUndefined(this.duplicateInfo)) {
                this.checkDuplicateInfo();

                if (this.duplicate) {
                    this.employeeCreationInProcess = false;
                    this.openDownModal();
                    this.toastService.warning("Duplicate record found")

                    if (this.utilityService.isNotNullOrEmptyOrUndefined(this.data.data["nationalId"]["0"]["nationalId"])) {
                        this.toastService.warning("NationaId  is  found")
                        this.nationalIdValidation = true;
                    }
                } else {
                    this.employeeCreationInProcess = true;
                    this.saveEmployeeInformation()
                }
            } else {
                this.employeeCreationInProcess = true;
                this.saveEmployeeInformation();
            }
        }, err =>{
            this.loader = false;});
    }

    getDateConvert() {
        for (let i in this.duplicateInfo) {
            if (this.isNumeric(this.duplicateInfo[i]["dateOfBirth"])) {
                this.duplicateInfo[i]["dateOfBirth"] = formatDate(this.duplicateInfo[i]["dateOfBirth"], 'yyyy-MM-dd', 'en-US', '+0000');
            }
        }
    }

    checkDuplicateInfo() {
        this.duplicate = false;

        for (var field in this.duplicateCheckValues) {
            for (const [key, value] of Object.entries(this.duplicateCheckValues[field])) {
                for (var fieldValue of this.duplicateInfo) {
                    if (this.utilityService.isNotNullOrEmptyOrUndefined(this.duplicateCheckValues)) {
                        this.duplicate = true;
                    }
                }
            }
        }
    }

    fetchWidgetsRole() {
        this.appRoles = this.sessionService.getCurrentUser().additionalDetails.neosuite.appRoles;

        for (var e in this.appRoles) {
            if (this.appRoles[e].appCode == this.appCode) {
                for (var m in this.appRoles[e].roles) {
                    this.appCode = this.appRoles[e].appCode;
                    this.appRole = this.appRoles[e].roles[m].roleName;
                }
            }
        }
    }

    openEmployeeIdModal() {
        var elems = document.getElementById("viewEmployeeIdModal");
        this.modalInstance = M.Modal.init(elems, { dismissible: false });
        this.modalInstance.open();
        this.modalMode = true;
    }

    closeEmployeeIdModal() {
        this.modalInstance.close();
        this.modalMode = false;
    }

    openGlobalIdModal() {
        var elem = document.getElementById("viewGlobalIdModal");
        this.modalInstanceGlobal = M.Modal.init(elem, { dismissible: false });
        this.modalInstanceGlobal.open();
        this.modalMode2 = true;
    }

    closeGlobalIdModal() {
        this.modalInstanceGlobal.close();
        this.modalMode2 = false;
    }

    outputFromFormView(outPutFromChild) {
        if (outPutFromChild.selectedAction == "saveButton" || outPutFromChild.selectedAction == "saveForLater") {
            this.selectedEventFromFormView = outPutFromChild.selectedAction;

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.oldData)) {
                this.oldData = outPutFromChild.oldData;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.updatedData)) {
                this.updatedData = outPutFromChild.updatedData.data;
            }

            this.formId = outPutFromChild.formId;
            this.data = outPutFromChild.data;
            this.fileList = outPutFromChild.fileList;
            this.employeeDTO = outPutFromChild.data.data;

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.deltaDIObj)) {
                this.deltaDIObj = outPutFromChild.deltaDIObj;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.deltaData)) {
                this.deltaData = outPutFromChild.deltaData;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.formFileData)) {
                this.formFileData = outPutFromChild.formFileData;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.totalFields)) {
                this.totalFields = outPutFromChild.totalFields;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.oldDataDisplayNames)) {
                this.oldDataDisplayNames = outPutFromChild.oldDataDisplayNames;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(outPutFromChild.newDataDisplayNames)) {
                this.newDataDisplayNames = outPutFromChild.newDataDisplayNames;
            }

            if (!this.employeeCreationInProcess || this.utilityService.isNullOrEmptyOrUndefined(this.employeeCreationInProcess)) {
                this.saveEmployeeProfileByApproval();
            } else {
                this.toastService.success("Employee Creation in Process");
            }
        }
        else if (outPutFromChild.selectedAction == "back") {
            this.showEventView();
        }
    }

    cancleEmployeeIdModal() {
        this.employeeDTO.employeeId = null;
        this.closeEmployeeIdModal();
        this.openGlobalIdModal();
    }

    cancleGlobalIdModal() {
        this.employeeDTO.employeeGlobalId = null;
        this.fetchEventForm();
        this.back();
        this.closeGlobalIdModal();
        this.employeeDTO = {}
        this.employeeCreationInProcess = false;
    }

    openSaveForLaterModal() {
        this.currentDraft;
        var elems = document.getElementById('draftModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.open();

        setInterval(() => {
            M.updateTextFields();
        }, 100);
    }

    closeSaveForLaterModal() {
        var elems = document.getElementById('draftModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.close();
    }

    openDraftViewModal() {
        this.currentDraft = null;
        this.draftViewModalOpen = true;

        var elems = document.getElementById('draftViewModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.open();

        this.selectRefresh();
    }

    closeDraftViewModal() {
        this.draftViewModalOpen = false;

        var elems = document.getElementById('draftViewModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.close();
    }

    saveDraft() {
        var saveForLaterObject: any = {};

        if (this.utilityService.isNullOrEmptyOrUndefined(saveForLaterObject.draftData)) {
            saveForLaterObject.draftData = {};
        }

        saveForLaterObject.draftData = this.data;
        saveForLaterObject.formCode = this.selectedEvent.formCode;
        saveForLaterObject.eventCode = this.selectedEvent.eventCode;
        saveForLaterObject.roleFormId = this.selectedEvent.id;

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.draftName)) {
            saveForLaterObject.draftName = this.draftName;
        } else {
            this.toastService.error("Enter DraftName");
            return;
        }

        this.http.post<any>("drafts", saveForLaterObject, this.options).subscribe(draftData => {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(draftData)) {
            }
            this.employeeCreationInProcess = true;

            this.closeSaveForLaterModal();
            this.showEventView();
        });
    }

    fetchDrafts(event) {
		debugger
		this.employeeData = {};
        this.draftsList = [];
        this.selectedEvent = event;
		this.candidateAPI = event.candidateAPI;
		const ele = document.getElementById("switch") as HTMLInputElement;
		ele.checked = false;
		if (ele.checked == false) {
			this.candidate = false;
			this.cEmployee = true;
			this.showRight = true;
		}
        if(this.candidateAPI == null){
			this.showLoadCandidate = true;
		}

        this.http.get<any>("" + event.formCode + "/drafts?formRoleId=" + event.id + "&formCode=" + event.formCode, this.options).subscribe(draftData => {
            this.draftsList = draftData.payload;

            if (this.utilityService.isNotNullOrEmptyOrUndefined(this.draftsList)) {
                this.openDraftViewModal();
            } else {
                this.openConfigurableFieldModal(this.selectedEvent);
            }
        })
    }

    openFromDrafts() {
        if (this.utilityService.isNullOrEmptyOrUndefined(this.currentDraft)) {
            this.toastService.error('Select Draft');
            return;
        }

        var draftData = JSON.parse(this.currentDraft.draftData);
        this.employeeData = draftData.data;
        this.employeeData["fromDraft"] = true;
        this.fetchEventForm();
    }

    openConfigurableFieldModal(selectedEvent) {
        if(selectedEvent.convoAI){
            this.convoAI = true;
        }
        if (this.draftViewModalOpen) {
            this.closeDraftViewModal();
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.currentDraft)) {
            this.currentDraft = null;
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.draftName)) {
            this.draftName = null;
        }

        this.createConfigurableModalFlag = true;
        this.createConfigurableFields = [];

        if (this.utilityService.isNotNullOrEmptyOrUndefined(selectedEvent.createConfigurableFields)) {
            this.createConfigurableFields = JSON.parse(selectedEvent.createConfigurableFields);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.createConfigurableFields)) {
                this.fetchEventForm();
                return false;
            } else {
                this.fetchValuesFromSource();
            }
        } else {
            this.fetchEventForm();
            return false;
        }
		this.cEmployee = true;
		this.candidate = false;
		this.showOptions = true;
		this.dataPresent = false;
        var elems = document.getElementById('configurableFieldsModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.open();

        this.selectRefresh();
    }

    closeConfigurableFieldsModal() {
        this.createConfigurableModalFlag = false;
        var elems = document.getElementById('configurableFieldsModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.close();
    }

    changeEvent(singleConfigurableField, m) {
        if (this.utilityService.isNullOrEmptyOrUndefined(this.employeeData)) {
            this.employeeData = {}
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined(singleConfigurableField.fieldValue)) {
            this.employeeData[singleConfigurableField.fieldName] = singleConfigurableField.fieldValue;
            this.fetchDependentFieldValues(singleConfigurableField);
        } else if (this.utilityService.isNullOrEmptyOrUndefined(singleConfigurableField.fieldValue)) {
            this.employeeData[singleConfigurableField.fieldName] = null;
            this.fetchDependentFieldValues2(singleConfigurableField)
        }
    }

    fetchValuesFromSource() {
        var dependentList: any = [];
        var newCreateConfigurableFields: any = [];
        var newCreateConfigurableFields = Object.assign([], this.createConfigurableFields)

        for (var singleField of newCreateConfigurableFields) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(singleField.dependentField)) {
                dependentList.push(singleField.dependentField);
            }
        }

        for (var singleCField of newCreateConfigurableFields) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(singleCField.sourceApi) && !dependentList.includes(singleCField.fieldName)) {
                this.getData(singleCField.sourceApi);
            }
        }
    }

    getData(apiId) {
        this.http.get<any>("api-configuration?apiId=" + apiId).subscribe(data => {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(data.payload)) {
                for (var key in data.payload) {
                    for (var singleCField of this.createConfigurableFields) {
                        if (key == singleCField.sourceApi) {
                            this.selectMDMData[key] = data.payload[key];
                        }
                    }
                }
            }
        })
    }

    createConfigurableFieldValidation() {
        for (var singleCreateConfigurableField of this.createConfigurableFields) {
            if (singleCreateConfigurableField.isMandatoryField) {
                if (this.utilityService.isNullOrEmptyOrUndefined(singleCreateConfigurableField.fieldValue)) {
                    this.toastService.error("Enter Mandatory Field");
                    return false;
                }
            }
        }
        return true;
    }

    sortEvents(events) {
        var eventsWithSequence = []
        var eventsWithOutSequence = []

        for (var event of events) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined2(event.sequence)) {
                eventsWithSequence.push(event)
            } else {
                eventsWithOutSequence.push(event);
            }
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(eventsWithSequence)) {
            for (var i = 0; i < eventsWithSequence.length; i++) {
                for (var j = 0; j < eventsWithSequence.length - 1; j++) {
                    if (eventsWithSequence[j].sequence > eventsWithSequence[j + 1].sequence) {
                        var temp = eventsWithSequence[j];
                        eventsWithSequence[j] = eventsWithSequence[j + 1];
                        eventsWithSequence[j + 1] = temp;
                    }
                }
            }
            eventsWithSequence = eventsWithSequence.concat(eventsWithOutSequence);
            return eventsWithSequence;
        } else {
            return eventsWithOutSequence;
        }
    }

    openDeleteDraftModal() {
        if (this.draftViewModalOpen) {
            this.closeDraftViewModal();
        }

        var elems = document.getElementById('deleteDraftModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.open();
    }

    closeDeleteDraftModal() {
        var elems = document.getElementById('deleteDraftModal');
        var instance = M.Modal.init(elems, { dismissible: false });
        instance.close();
    }

    backToDraftViewModal() {
        this.closeDeleteDraftModal();
        this.openDraftViewModal();
    }

    backToEventsView() {
        this.draftsList = null;
        this.closeDeleteDraftModal();
    }

    deleteDrafts() {
        debugger
        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.deleteDraftsList)) {
           /*  var deleteDrafts = {
                deleteDrafts: this.deleteDraftsList
            } */
            var id = "";
            this.deleteDraftsList.forEach(data => {
                id = id + data.id + ',';
            });

            this.http.delete<any>("drafts?id="+ id).subscribe(draftData => {
                this.draftsList = null;
                this.deleteDraftsList = null;
                this.closeDeleteDraftModal()
                this.selectRefresh();
            });
        } else {
            this.toastService.error("Select Drafts for Deletion")
            this.deleteDraftsList = null;
        }
    }

    openDownModal() {
        var elemodal = document.getElementById('modal1');
        var instance = M.Modal.init(elemodal, {
            dismissible: false
        });

        instance.open();
    }

    saveForm() {
        this.duplicate = false;
		this.loader =  true;
        if (this.utilityService.isNullOrEmptyOrUndefined(this.data.data["nationalId"])) {
            this.saveEmployeeInformation()
        } else {
            this.toastService.warning("Please Check National Id");
        }
    }

    closeDownModal() {
        var elemodal = document.getElementById('modal1');
        var instance = M.Modal.init(elemodal, {});
        instance.close();

    }

    fetchDependentFieldValues2(singleConfigurableField) {
        if (this.utilityService.isNotNullOrEmptyOrUndefined(singleConfigurableField.dependentField)) {
            for (var i = 0; i < this.createConfigurableFields.length; i++) {
                if (this.createConfigurableFields[i].fieldName == singleConfigurableField.dependentField) {
                    this.createConfigurableFields[i].fieldValue = null;
                    this.selectMDMData[this.createConfigurableFields[i].sourceApi] = []

                    if (this.utilityService.isNotNullOrEmptyOrUndefined(this.createConfigurableFields[i].dependentField)) {
                        this.fetchDependentFieldValues2(this.createConfigurableFields[i])
                    }
                    break;
                }
            }
        }
    }

    fetchDependentFieldValues(singleConfigurableField) {
        if (this.utilityService.isNotNullOrEmptyOrUndefined(singleConfigurableField.dependentField)) {
            for (var i = 0; i < this.createConfigurableFields.length; i++) {
                if (this.createConfigurableFields[i].fieldName == singleConfigurableField.dependentField) {
                    this.createConfigurableFields[i].fieldValue = null;
                    this.fetchDependentValues(this.createConfigurableFields[i], singleConfigurableField);
                    if (this.utilityService.isNotNullOrEmptyOrUndefined(this.createConfigurableFields[i].dependentField)) {
                        this.fetchDependentFieldValues2(this.createConfigurableFields[i])
                    }
                    break;
                }
            }
        }
    }

    fetchDependentValues(field, parentField) {
        if (this.utilityService.isNullOrEmptyOrUndefined(this.selectMDMDataLoader[field.sourceApi])) {
            this.selectMDMDataLoader[field.sourceApi] = false
        }

        this.selectMDMDataLoader[field.sourceApi] = true

        var name = parentField.fieldName;
        var countryCode = parentField.fieldValue

        var obj: any = {
            [name]: countryCode
        }

        this.http.get<any>(countryCode +"/businessunit?apiId=" + field.sourceApi).subscribe(data => {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(data.payload)) {
                for (var key in data.payload) {
                    for (var singleCField of this.createConfigurableFields) {
                        if (key == singleCField.sourceApi) {
                            this.selectMDMData[key] = data.payload[key];
                            this.selectMDMDataLoader[key] = false
                        }
                    }
                }
            }
        })
    }



	selectValue(event: any) {
		this.candidateValue = event;
	}

	getApiDetails() {
		debugger
		this.loader1 = true;
		this.employeeData = {};
		let input = {
			"candidateAPI": this.candidateAPI, "employeeDetails": { "employeeGlobalId": this.candidateFilterDTO.employeeGlobalId }
		};
        let url = "candidate/" + this.candidateAPI + "/employeeGlobalId/" + this.candidateFilterDTO.employeeGlobalId;
        //fetchApiDetails
		this.http.get<any>(url, this.options).subscribe(draftData => {
			this.employeeData = draftData.payload.finalResponse[0];
			//console.log("ED", this.employeeData)
			if (this.utilityService.isNotNullOrEmptyOrUndefined(this.employeeData)) {
				this.keyRestrictions["employeeGlobalId"] = this.candidateFilterDTO.employeeGlobalId;
                this.loadCandidate = true;
				this.fetchEventForm();
			}
			else {
				this.toastService.warning("Record not found");
			}
		});

	}

	getAutoCompleteResult(enteredValue) {

		debugger
		if (enteredValue == "") {
			this.toastService.error("Enter value");
			return false;
		}

		switch (this.candidateValue) {
			case "Global Employee ID":
				{
					this.candidateFilterDTO.employeeGlobalId = enteredValue;
					this.candidateFilterDTO.nationalId = null;
					this.candidateFilterDTO.phoneNumber = null;
					break;
				}
			case "National ID":
				{
					this.candidateFilterDTO.employeeGlobalId = null;
					this.candidateFilterDTO.nationalId = enteredValue;
					this.candidateFilterDTO.phoneNumber = null;
					break;
				}
			case "Phone Number":
				{
					this.candidateFilterDTO.employeeGlobalId = null;
					this.candidateFilterDTO.nationalId = null;
					this.candidateFilterDTO.phoneNumber = enteredValue;
					break;
				}
			default:
				{
					this.candidateFilterDTO.employeeGlobalId = null;
					this.candidateFilterDTO.nationalId = null;
					this.candidateFilterDTO.phoneNumber = null;
					break;
				}
		}
		console.log(this.candidateFilterDTO);
        let params = "";
        let path;

        if(this.utilityService.isNotNullOrEmptyOrUndefined(this.candidateFilterDTO.employeeGlobalId)) {
            path = "employeeGlobalId"
            params = "?value=" + this.candidateFilterDTO.employeeGlobalId;
        }

        if(this.utilityService.isNotNullOrEmptyOrUndefined(this.candidateFilterDTO.nationalId)) {
            path = "nationalId"
            params = "?value=" + this.candidateFilterDTO.nationalId;
        }

        if(this.utilityService.isNotNullOrEmptyOrUndefined(this.candidateFilterDTO.phoneNumber)) {
            path = "phoneNumber"
            params = "?value=" + this.candidateFilterDTO.phoneNumber;
        }

		this.http.get<any>("candidate/"+ path + params).subscribe(data => {

			this.employeeData = data.payload.list[0];

			if (this.employeeData == null) {
				this.toastService.error("No data found");
				this.enteredValue = "";
				this.dataPresent = false;
			}
			else {
				this.dataPresent = true;
				debugger
				if (this.utilityService.isNotNullOrEmptyOrUndefined(this.employeeData["countryCode"])) {

					this.dynamicInputVariable['countryCode'] = this.employeeData["countryCode"];
					this.dynamicInputVariable['businessunitCode'] = this.employeeData["businessunitCode"];

				}
			}

			console.log("employee data:", this.employeeData);
		}
		);
	}


	onClick() {
		debugger
		this.candidateValue = "Global Employee ID";
		console.log("clicked");
		this.checkToggle = !this.checkToggle;
		const ele = document.getElementById("switch") as HTMLInputElement;
		if (this.checkToggle == false) {
			ele.checked = false;
			this.loadCandidate = false;
		}
		else { ele.checked = true; 
		this.loadCandidate
		 }

		ele.checked = !ele.checked;
		if (ele.checked == true) {
			this.candidate = true;
			this.cEmployee = false;
			this.showOptions = true;
			this.showRight = false;
		}
		else {
			this.candidate = false;
			this.cEmployee = true;
			this.showRight = true;
		}
	}
    
}
