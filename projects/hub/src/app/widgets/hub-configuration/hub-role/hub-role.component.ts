import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { ToastService, WidgetService } from '@nw-workspace/common-services';
import * as M from "materialize-css/dist/js/materialize";
import { CompleterData, CompleterService } from 'ng2-completer';
import { environment } from 'projects/hub/src/environments/environment.prod';
import { ApplicationDTO } from 'projects/neosuite/src/app/models/ApplicationDTO';
import { FormDTO } from '../../../model/FormDTO';
import { RoleConfigurationDTO } from '../../../model/RoleConfigurationDTO';
import { RoleFormMappingDTO } from '../../../model/RoleFormMappingDTO';
import { UtilityService } from '../../../services/utility.service';

declare var $: any;
declare var require: any;

@Component({
    selector: 'app-hub-role',
    templateUrl: './hub-role.component.html',
    styleUrls: ['./hub-role.component.css']
})

export class PexRoleComponent implements OnInit {
    inputVariableNotificationTo: any = [];
    showNeosuiteNotificationConfiguration: boolean = false;
    fieldValue = {
        fieldName: "",
        fieldLabel: ""
    }
    fieldList: any = [];
    suggestions: any = [];
    eventFlag: boolean = false;
    actionFlag: boolean = false;
    actionEvent: any;
    actionList: any = [];
    inputVariableBCC: any = [];
    roleConfigurationModalFlag: boolean = false;
    inputVariableCC: any = [];
    inputVariableTo: any = [];
    dataService: CompleterData;
    apiList: any = [];
    createConfigurableFields: any = [];
    updatedForTemplateCodeFlag: boolean = false;
    updatedByTemplateCodeFlag: boolean = false;
    allRoleList: any = [];
    listOfRolesByApplication2: any = [];
    allApplicationsCode: any = [];
    listOfRolesByApplication: any;
    allEvents: any;
    edited: boolean;
    roleId: any;
    approvalSpocConfiguration: boolean = false;
    roleConfig: any;
    itemsPerPageToDisplay: any = 50;
    actionButtonsObject: { buttonName: any; buttonTitle: any; iconName: any; };
    events: any = [];
    roleMappingDTO: any = {};
    formAdditionView: boolean = false;
    createForm: boolean = false;
    currentWidgetComponent: any = {};
    widgetComponents: any;
    allFormsList: any;
    modalInstance: any;
    default: boolean;
    formId: string;
    checkList: any = [];
    listId: any;
    idGenrationType: any;
    formList: any = [];
    businessUnitList: any = [];
    countryBusinessUnitList: any = [];
    countryList: any = [];
    response: any;
    listOfApplications: any;
    listOfRoles: any;
    idGeneratorList: any[] = [{ "idType": "Manual" }, { "idType": "AutoGenerated" }, { "idType": "Both" }];
    listConfig: any;
    widgetWidth: number;
    rolemapping: RoleConfigurationDTO = new RoleConfigurationDTO();
    roleList1: RoleConfigurationDTO = new RoleConfigurationDTO();
    selectedconfigurationList: number;
    configurationList: FormDTO[] = [];
    configurationupdate: FormDTO[] = [];
    roleList: RoleConfigurationDTO[] = [];
    currentPage: number = 1;
    pageSizeOption1: any = [10, 20, 30];
    count: number;
    searchKey: string = "";
    search: string = "";
    itemsPerPage: number = 5;
    configrole: any;
    serachkeyListconfig: string = "";
    applicationDTO: ApplicationDTO = new ApplicationDTO();
    roleFormMappingDTO: RoleFormMappingDTO = new RoleFormMappingDTO();
    duplicateEmpCheck: any = {};

    customField: any = {};
    customFieldModalInstance: any = null;
    customFieldsConfiguration: any = [];
    updateCustomFieldFlag: boolean = false;

    notification: any = {};
    approvalNotification: any = {};
    emailNotificationType: boolean = false;
    emailNotificationModal: boolean = false;
    approvalEmailNotificationModal: boolean = false;
    emailNotificationModalInstance: any = null;
    approvalEmailNotificationModalInstance: any = null;

    neosuiteNotifications: any = {};
    approvalNeosuiteNotifications: any = {};
    neosuitNotificationType: boolean = false;
    neosuiteNotificationModal: boolean = false;
    approvalNeosuiteNotificationModal: boolean = false;
    neosuiteNotificationModalInstance: any = null;
    approvalNeosuiteNotificationModalInstance: any = null;
    addButtonFlag: boolean;
    cdnUrl=environment.cdnPath;
    viewNeoConfig: boolean = false;
    futureDated: boolean;
    selectedConvoAI: boolean = false;

    allActionRoles: any = [
        { "roleName": "Approved", "roleIdentifier": "approved" },
        { "roleName": "Rejected", "roleIdentifier": "rejected" },
        { "roleName": "Cancelled", "roleIdentifier": "cancelled" },
        { "roleName": "Escalation", "roleIdentifier": "escalation" },
        { "roleName": "Reminder", "roleIdentifier": "reminder" }
    ];

    allActionRolesNotification: any = [
        { "roleName": "Cancelled", "roleIdentifier": "cancelled" },
        { "roleName": "Rejected", "roleIdentifier": "rejected" },
        { "roleName": "Approved", "roleIdentifier": "approved" }
    ];

    eventActionList: any = [
        { "name": "Event", "value": "event" },
        { "name": "Action", "value": "action" }
    ];

    mailerList: any = [
        { "name": "Creator", "value": "Creator" },
        { "name": "Assigner", "value": "Assigner" },
        { "name": "Assignee", "value": "Assignee" },
        { "name": "ApprovalFor", "value": "ApprovalFor" },
        { "name": "UpdatedBy", "value": "UpdatedBy" },
        { "name": "UpdatedFor", "value": "UpdatedFor" },
        { "name": "ProxyBy", "value": "ProxyBy" }
    ];

    customFieldTypeList: any = [
        { "name": "Custom Fields First", "value": "customFieldsFirst" },
        { "name": "Custom Fields Second", "value": "customFieldsSecond" },
        { "name": "CustomFields Third", "value": "customFieldsThird" },
        { "name": "Custom Fields Fourth", "value": "customFieldsFourth" }
    ];

    numberList: any = [{ "number": 1 }, { "number": 2 }, { "number": 3 }, { "number": 4 }, { "number": 5 }, { "number": 6 }, { "number": 7 }, { "number": 8 }, { "number": 9 }, { "number": 10 }];
    flag: any = {};
    singleRole: any = {};
    roles: any;
    emailStatus: boolean = false;
	//showAPI: boolean = false;
    newConfigObject: {};
    roleConfigArray: any =[];
    uploadFile: any;
    cloneEventList: any;
    configCode: any;

    constructor(private http: HttpClient, private toastService: ToastService, private widgetService: WidgetService, private utilityService: UtilityService, private completerService: CompleterService) { }

    ngOnInit() {
        this.fetchApplicationFromNeosuite()
        this.fetchAllWidgetComponent();
        this.fetchListConfig();
        this.fetchEventList();
        this.fetchAllEventList();
        this.fetchActions();

        this.currentWidgetComponent = {};
        this.currentWidgetComponent.widgetComponentCode = null;
    }

    ngAfterViewInit() {
        $('.modal').modal();
        $('select').formSelect();
        setTimeout(function () {
            M.AutoInit();
        }, 10);

        var elemodal = document.getElementById('role');
        this.modalInstance = M.Modal.init(elemodal, {});

        var elementResizeDetectorMaker = require("element-resize-detector");
        var erdUltraFast = elementResizeDetectorMaker({
            strategy: "scroll" //<- For ultra performance.
        });
        erdUltraFast.listenTo(document.getElementById("roleView"), element => {
            this.onResizedEvent(element);
        });
    }

    selectRefresh() {
        setTimeout(function () {
            $('select').formSelect();
            M.updateTextFields();
        }, 10);
    }

    reset() {
        this.roleFormMappingDTO.form.id = undefined;
        this.selectRefresh();
    }

    setPageSize(size) {
        this.currentPage = 1;
        var fetchData = false;

        if (this.itemsPerPage < size)
            fetchData = true;
        this.itemsPerPage = size;
        if (fetchData) {
            //            this.fetchRoleList();
        }
        else {
            this.roleList = this.roleList.slice(0, size);
        }
    }

    setWidgetComponent() {
        this.roleMappingDTO.component = this.currentWidgetComponent.widgetComponentCode;

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.widgetComponents)) {
            for (var WidgetComponent of this.widgetComponents) {
                if (WidgetComponent.widgetComponentCode == this.currentWidgetComponent.widgetComponentCode) {
                    this.currentWidgetComponent = WidgetComponent;
                    break;
                }
            }
        }

        if (this.currentWidgetComponent.listView) {
            this.roleMappingDTO.configList = {};
            this.roleMappingDTO.configList.id = null;
            this.roleMappingDTO.futureDatedApi = {};
            this.roleMappingDTO.futureDatedApi.id = null;
        }

        if (this.roleMappingDTO.component == "create" || this.roleMappingDTO.component == "candidateCreate" || this.roleMappingDTO.component.includes('create') || this.roleMappingDTO.component.includes('Create'))
            this.createForm = true;
        else
            this.createForm = false;

        this.selectRefresh();
    }

    openDropdown() {
        let dropDownEle: Element = document.getElementById("dropdownB")
        var instance = M.Dropdown.init(dropDownEle, { coverTrigger: false, closeOnClick: true });
        instance.open();
    }

    onResizedEvent(event) {
        this.widgetWidth = this.widgetService.onResized(event);
        if (this.widgetWidth > 12) {
            this.widgetWidth = 12
        }
    }

    getResponsiveClasses(widgetWidth, classSizeList, defaultClasses) {
        return this.widgetService.getResponsiveClasses(widgetWidth, classSizeList, defaultClasses);
    }

    getHideShow(className, widgetWidth, comparator, startSize, endSize) {
        return this.widgetService.getHideShow(className, widgetWidth, comparator, startSize, endSize);
    }

    openFormDropDown(index, form) {
        var instance = M.Dropdown.init(document.getElementById('FormView' + index), {
            alignment: 'left',
            closeOnClick: true
        });

        instance.recalculateDimensions();
        this.formId = form.formId;
        this.default = form.setDefault;
        instance.open();
    }

    onCustomApprovalChanges() {
        this.roleMappingDTO.flowCode = null;
        this.selectRefresh();
    }

    onOldApprovalChanges() {
        this.roleMappingDTO.customDataFlow = false;
        this.roleMappingDTO.routineId = null;
        this.roleMappingDTO.flowCode = null;
        this.selectRefresh();
    }

    checkSelected(defaultForm, i) {
        this.checkList[i] = "checked";

        for (var j = 1; j <= this.formList; j++) {
            if (j != i) {
                this.checkList[j] = "unchecked"
            }
        }
    }

    fetchEventList() {
        this.http.get<any>("event").subscribe(data => {
            this.events = data.payload.eventList;
            setTimeout(() => {
                this.selectRefresh();
            }, 10);
        })
    }

    fetchAllEventList() {
        this.http.get<any>("event?action=findAll").subscribe(data => {
            this.allEvents = data.payload.eventList;
            setTimeout(() => {
                this.selectRefresh();
            }, 10);
        })
    }

    openFormModal() {
        this.modalInstance.open();
        this.roleFormMappingDTO.form.id = null;
        this.selectRefresh();
    }

    closeFormModal() {
        this.modalInstance.close();
    }

    saveConfiguration() {
        debugger
        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.applicationDTO.appCode)) {
            this.roleMappingDTO.appCode = this.applicationDTO.appCode;
        } else {
            return this.toastService.error("Select application");
        }

       /*  if (this.roleMappingDTO.roleCode == undefined || this.roleMappingDTO.roleCode == null) {
            return this.toastService.error("Select role");
        } */
        if (this.roleMappingDTO.roleArray == undefined || this.roleMappingDTO.roleArray == null) {
            return this.toastService.error("Select role");
        }

        if (this.roleMappingDTO.component == undefined || this.roleMappingDTO.component == null) {
            return this.toastService.error("Select widget component");
        }

        if (this.currentWidgetComponent.listView && (this.roleMappingDTO.configList.id == undefined || this.roleMappingDTO.configList.id == null)) {
            return this.toastService.error("Select list configuration");
        }
        if (this.currentWidgetComponent.listView && (this.roleMappingDTO.futureDatedApi.id == undefined || this.roleMappingDTO.futureDatedApi.id == null) && this.futureDated) {
            return this.toastService.error("Select Future Dated Api for List");
        }

        if (!this.edited && !this.currentWidgetComponent.listView && (this.actionEvent == undefined || this.actionEvent == null)) {
            return this.toastService.error("Select Event/Action");
        }

        if (!this.currentWidgetComponent.listView && this.eventFlag) {
            if (this.roleMappingDTO.eventCode == undefined || this.roleMappingDTO.eventCode == null) {
                return this.toastService.error("Select Event");
            }
        }

        if (!this.currentWidgetComponent.listView && this.actionFlag) {
            if (this.roleMappingDTO.actionCode == undefined || this.roleMappingDTO.actionCode == null) {
                return this.toastService.error("Select Action");
            }
        }

        if (!this.currentWidgetComponent.listView && (this.roleMappingDTO.formCode == undefined || this.roleMappingDTO.formCode == null)) {
            return this.toastService.error("Enter FormCode");
        }

        if (this.createForm && (this.roleMappingDTO.idAutoGenerate == undefined || this.roleMappingDTO.idAutoGenerate == null)) {
            return this.toastService.error("Select employeeId generator type");
        }

        if (this.createForm && (this.roleMappingDTO.globalIdAutoGenerate == undefined || this.roleMappingDTO.globalIdAutoGenerate == null)) {
            return this.toastService.error("Select globalId generator type");
        }

        if (!this.currentWidgetComponent.listView) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.roleMappingDTO.sequence)) {
                this.toastService.error("Sequence sholud be a numeric value");
                return false;
            }
        }
        
        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.createConfigurableFields)) {
            this.roleMappingDTO.createConfigurableFields = JSON.stringify(this.createConfigurableFields);
        } else {
            this.createConfigurableFields = [];
            this.roleMappingDTO.createConfigurableFields = JSON.stringify(this.createConfigurableFields);
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.customFieldsConfiguration)) {
            this.roleMappingDTO.customFieldsConfiguration = JSON.stringify(this.customFieldsConfiguration);
        } else {
            this.customFieldsConfiguration = [];
            this.roleMappingDTO.customFieldsConfiguration = JSON.stringify(this.customFieldsConfiguration);
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.notification)) {
            this.roleMappingDTO.notification = JSON.stringify(this.notification);
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.approvalNotification)) {
            this.roleMappingDTO.approvalNotification = JSON.stringify(this.approvalNotification);
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.neosuiteNotifications)) {
            this.roleMappingDTO.neosuiteNotifications = JSON.stringify(this.neosuiteNotifications);
        }

        if (this.roleMappingDTO.customDataFlow) {
            if (this.utilityService.isNullOrUndefined(this.roleMappingDTO.routineId)) {
                return this.toastService.error("Select RoutineId");
            }
        }

        if (this.utilityService.isNullOrEmptyOrUndefined(this.roleMappingDTO.deltaApi)) {
            this.roleMappingDTO.deltaApi = false;
        }

		/* if (this.utilityService.isNullOrEmptyOrUndefined(this.roleMappingDTO.candidateMerge)) {
			this.roleMappingDTO.candidateMerge = this.showAPI;
		}
		
		if (this.utilityService.isNullOrEmptyOrUndefined(this.roleMappingDTO.candidateAPI)) {
			this.roleMappingDTO.candidateAPI = this.selectedAPI;
		} */

        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.duplicateEmpCheck)) {
            var info = JSON.stringify(this.duplicateEmpCheck);
            this.roleMappingDTO.duplicateCheck = info
        }

        this.http.post<any>("role", this.roleMappingDTO).subscribe(data => {
            this.createForm = false;
            this.closeModal();
            this.fetchAllRoleConfiguration();
            this.selectRefresh();
            setTimeout(() => {
                M.AutoInit();
            }, 0);
        })
    }

    configurationName(c1: any, c2: any): boolean {
        return c1 && c2 ? c1 === c2 : false;
    }

    fetchListConfig() {
        this.http.get<any>("list?serachkeyListconfig=" + this.serachkeyListconfig).subscribe(data => {
            this.listConfig = data.payload.ConfigurationList;
            this.selectRefresh();
        })
    }

    fetchRolesByApplicationFromNeosuite() {
        this.formList = [];
        this.listOfRolesByApplication = [];

        this.listOfApplications.forEach(item => {
            if (this.applicationDTO.appCode == item.appCode) {
                this.applicationDTO = item;
            }
        });

        this.http.get<any>("neosuite/roles/application/" + this.applicationDTO.appCode).subscribe(data => {
            this.listOfRolesByApplication = data.payload;
            this.selectRefresh();
        }, err => {
        })
    }

    fetchRolesByApplicationFromNeosuite2(appCode) {
        return new Promise((resolve, reject) => {
            this.http.get<any>("neosuite/roles/application/" + appCode).subscribe(data => {
                this.listOfRolesByApplication2 = data.payload;
                if (this.utilityService.isNotNullOrEmptyOrUndefined(this.listOfRolesByApplication2)) {
                    this.allRoleList = this.allRoleList.concat(this.listOfRolesByApplication2);
                }
                return resolve(1);
            }, err => {
                return null;
            })
        });
    }

    fetchApplicationFromNeosuite() {
        this.http.get<any>("neosuite/applications").subscribe(data => {
            this.listOfApplications = data.payload;
            this.roleFormMappingDTO = new RoleFormMappingDTO();
            this.selectRefresh();
            this.fetchBusinessUnitList();
            this.fetchCountryList();
        })
    }

    fetchBusinessUnitList() {
        this.http.get<any>("businessunit").subscribe(data => {
            this.businessUnitList = data.payload.list;
            this.selectRefresh();
        });
    }

    fetchCountryList() {
        this.http.get<any>("countries").subscribe(data => {
            this.countryList = data.payload.list;
            this.selectRefresh();
            this.fetchAllRoleConfiguration();
        })
    }

    onCountrySelect(countryCode) {
        this.countryBusinessUnitList = [];
        this.roleMappingDTO.businessunitCode = null;

        this.http.get<any>("businessunit?countryCode='" + countryCode + "'").subscribe(data => {
            this.countryBusinessUnitList = data.payload.list;
            this.selectRefresh();
        });

        this.selectRefresh();
    }

    fetchAllWidgetComponent() {
        this.currentWidgetComponent = null;
        this.widgetComponents = []
        this.http.get<any>("widget").subscribe(data => {
            this.widgetComponents = data.payload.WidgetComponentList;
            this.selectRefresh();
        })
    }

    deleteFormConfiguration(form) {
        this.http.post<any>("deleteFormMapping?formId=" + this.formId, this.roleFormMappingDTO).subscribe(data => {
            this.selectRefresh();
            setTimeout(() => {
                M.AutoInit();
            }, 0);
        });
    }

    fetchAllRoleConfiguration() {
        this.http.get<any>("role?searchKey=" + this.searchKey + "&page=" + (this.currentPage - 1) + "&size=" + this.itemsPerPageToDisplay).subscribe(data => {
           
            this.roleConfig = data.payload.roleConfig.content;
            this.count = data.payload.count;

            for (var singleConfig of this.roleConfig) {
                if (!this.allApplicationsCode.includes(singleConfig.appCode)) {
                    this.allApplicationsCode.push(singleConfig.appCode);
                }
            }

            for (var singleAppCode of this.allApplicationsCode) {
                for (var app of this.listOfApplications) {
                    var roleList = null;
                    if (app.appCode == singleAppCode) {
                        this.fetchRolesByApplicationFromNeosuite2(app.appCode).then(() => {
                            for (var app of this.allRoleList) {
                                for (let i in this.roleConfig) {
                                    if (this.roleConfig[i].roleCode == app.roleCode) {
                                        this.roleConfig[i].roleName = app.roleName
                                    }

                                }
                            }
                        });
                    }
                }
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.allEvents)) {
                for (var app of this.allEvents) {
                    for (let i in this.roleConfig) {
                        if (this.roleConfig[i].eventCode == app.eventCode) {
                            this.roleConfig[i].eventName = app.eventName
                        }
                    }
                }
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.actionList)) {
                for (var action of this.actionList) {
                    for (let i in this.roleConfig) {
                        if (this.roleConfig[i].actionCode == action.actionCode) {
                            this.roleConfig[i].actionName = action.actionName;
                        }
                    }
                }
            }

            for (let bu of this.businessUnitList) {
                for (let role of this.roleConfig) {
                    if (role.businessUnitCode == bu.businessunitCode) {
                        role.businessUnitName = bu.businessunitName
                    }
                }
            }

            for (let country of this.countryList) {
                for (let role of this.roleConfig) {
                    if (role.countryCode == country.countryCode) {
                        role.countryName = country.countryName
                    }
                }
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(this.listOfApplications)) {
                for (let i in this.roleConfig) {
                    for (var app of this.listOfApplications) {
                        if (this.roleConfig[i].applicationCode == app.appCode) {
                            this.roleConfig[i].applicationName = app.appName
                        }

                    }
                }
            }

            this.roleConfig.forEach(role =>{
                if(this.utilityService.isNotNullOrEmptyOrUndefined(role.listConfigId)){
                   role.configList = {};
                   for(let list of this.listConfig){
                       if(list.id == role.listConfigId){
                        role.configList["id"] = role.listConfigId;
                        role.configList["listConfigName"] = list.listConfigName;
                       }
                   }

                }
                if(this.utilityService.isNotNullOrEmptyOrUndefined(role.futureDatedApiId)){
                    role.futureDatedApi = {};
                    for(let list of this.listConfig){
                        if(list.id == role.futureDatedApiId){
                         role.futureDatedApi["id"] = role.listConfigId;
                         role.futureDatedApi["listConfigName"] = list.listConfigName;
                        }
                    }
 
                 }
            })
            
            this.actionButtonsDisplay();
            this.selectRefresh();
        })
    }

    onListSelect(event) {
        this.roleMappingDTO.configList.id = event.id;
        this.roleMappingDTO.configList.listConfigName = event.listConfigName;
    }

    openModal(roleConfig) {
        this.emailStatus = false;
        this.roleConfigurationModalFlag = true;
        this.createConfigurableFields = [];
        this.customFieldsConfiguration = [];
        this.duplicateEmpCheck = {}
		this.fieldList = [];
		//this.showAPI = false;
		//this.selectedAPI = null;
        this.fetchApi();
        this.showNeosuiteNotificationConfiguration = true;

        if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig)) {
            if(this.utilityService.isNullOrEmptyOrUndefined(roleConfig.futureDatedApiId)){
                roleConfig.futureDatedApi = {};
                roleConfig.futureDatedApi.id = null;
                roleConfig.futureDatedApi.listConfigName = null; 

            }
            this.futureDated = roleConfig.futureDated;
            this.edited = true;
            this.roleMappingDTO = Object.assign(roleConfig, {});
            this.roleMappingDTO.roleArray = [];
            this.roleMappingDTO.roleArray.push(this.roleMappingDTO.roleCode);

            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.roleMappingDTO.countryCode) && this.utilityService.isNotNullOrEmptyOrUndefined2(this.roleMappingDTO.businessUnitCode)) {
                this.countryBusinessUnitList = [];

                this.http.get<any>("businessunit?countryCode='" + this.roleMappingDTO.countryCode + "'").subscribe(data => {
                    this.countryBusinessUnitList = data.payload.list;
                    this.selectRefresh();
                });

                this.selectRefresh();
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(this.roleMappingDTO.employeeGlobalId)) {
                var termData = {
                    term: this.roleMappingDTO.employeeGlobalId
                }
                this.getAutoComplete(termData);
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined2(roleConfig.eventCode)) {
                this.eventFlag = true;
                this.actionFlag = false;
            } else {
                this.eventFlag = false;
                this.actionFlag = true;
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.createConfigurableFields)) {
                this.createConfigurableFields = JSON.parse(roleConfig.createConfigurableFields);
            }

			/* if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.candidateMerge)) {
				this.showAPI = roleConfig.candidateMerge;
			}
			
			if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.candidateAPI)) {
				this.selectedAPI = roleConfig.candidateAPI;
			} */

            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.customFieldsConfiguration)) {
                this.customFieldsConfiguration = JSON.parse(roleConfig.customFieldsConfiguration);
            }

            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.duplicateCheck)) {
                this.duplicateEmpCheck = JSON.parse(roleConfig.duplicateCheck);
                if (this.utilityService.isNotNullOrEmptyOrUndefined(this.duplicateEmpCheck)) {

                    this.fieldList = this.duplicateEmpCheck["field"]
                }
            }

            for (var app of this.listOfApplications) {
                if (app.appCode == roleConfig.appCode) {
                    this.applicationDTO = app;
                }
            }

            this.fetchRolesByApplicationFromNeosuite();

            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.component)) {
                this.currentWidgetComponent = {};
                this.currentWidgetComponent.widgetComponentCode = null;
                this.currentWidgetComponent.widgetComponentCode = roleConfig.component;

                if (this.utilityService.isNotNullOrEmptyOrUndefined(this.widgetComponents)) {
                    for (var WidgetComponent of this.widgetComponents) {
                        if (WidgetComponent.widgetComponentCode == roleConfig.component) {
                            this.currentWidgetComponent = WidgetComponent;
                            if (this.currentWidgetComponent.widgetComponentCode == 'create' || this.currentWidgetComponent.widgetComponentCode == 'candidateCreate' || this.currentWidgetComponent.widgetComponentCode.includes('create') || this.currentWidgetComponent.widgetComponentCode.includes('Create')) {
                                if (!this.createForm) {
                                    this.createForm = true;
                                }
                            }
                            break;
                        }
                    }
                }
            }
            this.selectRefresh();
        } else {
            this.futureDated = false;
            this.edited = false;
            this.roleMappingDTO = {};
            this.roleMappingDTO.oldApprovalFlow = true;
            this.suggestions = []
            this.currentWidgetComponent = {};
            this.currentWidgetComponent.widgetComponentCode = null;
            this.applicationDTO = new ApplicationDTO();
            this.roleFormMappingDTO = new RoleFormMappingDTO();
        }

        var elems = document.getElementById('hub_role')
        var instances = M.Modal.init(elems, { dismissible: false });
        instances.open();
    }

    closeModal() {
        this.roleMappingDTO = {};
        this.currentWidgetComponent = {};
        this.currentWidgetComponent.widgetComponentCode = null;
        this.roleFormMappingDTO = new RoleFormMappingDTO();
        this.createForm = false
        var elems = document.getElementById('hub_role')
        var instances = M.Modal.init(elems, {});
        instances.close();
        this.roleConfigurationModalFlag = false;
    }

    closeTemporaryModal() {
        var elems = document.getElementById('hub_role')
        var instances = M.Modal.init(elems, {});
        instances.close();
        this.roleConfigurationModalFlag = false;
    }

    openSpocConfiguration() {
        this.approvalSpocConfiguration = true;
    }

    approvalEventHandler($event: any) {
        this.approvalSpocConfiguration = $event;
    }

    removeRoleMapping(roleId) {
        this.http.delete<any>("role?roleId=" + roleId + "&enabled=false").subscribe(data => {
            this.fetchAllRoleConfiguration();
        })
    }

    activateRoleMapping(roleId) {
        this.http.delete<any>("role?roleId=" + roleId + "&enabled=true").subscribe(data => {
            this.fetchAllRoleConfiguration();
        })
    }

    actionButtonsObjectCreation(buttonName, buttonTitle, iconName) {
        return this.actionButtonsObject = {
            buttonName: buttonName,
            buttonTitle: buttonTitle,
            iconName: iconName
        }
    }

    actionButtonsDisplay() {
        for (var k in this.roleConfig) {
            this.roleConfig[k].actionButtonsList = [];

            this.roleConfig[k].actionButtonsList.push(this.actionButtonsObjectCreation("viewButton", "Edit",environment.cdnPath+"/Hub/edit"));
            if (this.roleConfig[k].enabled)
                this.roleConfig[k].actionButtonsList.push(this.actionButtonsObjectCreation("Deactive", "Deactive",environment.cdnPath+"/Hub/flash_off"));
            if (!this.roleConfig[k].enabled)
                this.roleConfig[k].actionButtonsList.push(this.actionButtonsObjectCreation("Active", "Active",environment.cdnPath+"/Hub/flash_on"));
            if (!this.roleConfig[k].listView) {
                this.roleConfig[k].actionButtonsList.push(this.actionButtonsObjectCreation("configurationButton", "Spoc",environment.cdnPath+"/Hub/people"));
            }
            if (this.utilityService.isNotNullOrEmptyOrUndefined(this.roleConfig[k].neoConfigCode))
                this.roleConfig[k].actionButtonsList.push(this.actionButtonsObjectCreation("viewNeoConfig", "Neo Configuration",environment.cdnPath+"/Hub/icons-info"));
        }
    }

    outputFromListView(outPutFromChild) {
        
        if (outPutFromChild.selectedAction == "viewButton") {
            let data = outPutFromChild.listDetails;
            this.openModal(data)
        } else if (outPutFromChild.selectedAction == "configurationButton") {
            let data = outPutFromChild.listDetails;
            this.roleId = data.id;
            this.openSpocConfiguration();
        } else if (outPutFromChild.selectedAction == "Deactive") {
            let data = outPutFromChild.listDetails;
            this.roleId = data.id;
            this.removeRoleMapping(this.roleId);
        }
        else if (outPutFromChild.selectedAction == "Active") {
            let data = outPutFromChild.listDetails;
            this.roleId = data.id;
            this.activateRoleMapping(this.roleId);
        }
        else if (outPutFromChild.listDetails == "add") {
            this.openModal(null);
            this.fetchAllRoleConfiguration();
        } else if (outPutFromChild.buttonClicked == "paginationClick") {
            this.currentPage = outPutFromChild.listDetails.page;
            this.itemsPerPageToDisplay = outPutFromChild.listDetails.size;
            this.fetchAllRoleConfiguration();
        }else if (outPutFromChild.buttonClicked == "resetButton") {
            this.currentPage = outPutFromChild.listDetails.page;
            this.itemsPerPageToDisplay = outPutFromChild.listDetails.size;
            this.searchKey = "";
            this.fetchAllRoleConfiguration();
        } else if (outPutFromChild.selectedAction == "globalSearch") {
            this.searchKey = outPutFromChild.listDetails
            this.fetchAllRoleConfiguration();
        } else if (outPutFromChild.listDetails == "cloud_download") {
            var res = this.cloneEventList
            this.generateUrl(res)

        } else if (outPutFromChild.listDetails == "cloud_upload") {
            this.openUploadModal();
        } else if (outPutFromChild.selectedAction == "viewNeoConfig") {
            this.configCode = outPutFromChild.listDetails.neoConfigCode;
            this.openNeoConfigModal();
        } else if (outPutFromChild.selectedAction == "rowBasedCheckBoxSelection") {
            this.cloneEventList = outPutFromChild.listDetails;
        }
    }

    showInputBoxForUpdatedBy() {
        if (this.updatedByTemplateCodeFlag) {
            this.updatedByTemplateCodeFlag = false;
        } else {
            this.updatedByTemplateCodeFlag = true;
        }
    }

    showInputBoxForUpdatedFor() {
        if (this.updatedForTemplateCodeFlag) {
            this.updatedForTemplateCodeFlag = false;
        } else {
            this.updatedForTemplateCodeFlag = true;
        }
    }

    changeEffectiveDateView() {
        if (this.roleMappingDTO.effectiveDateView) {
            this.roleMappingDTO.effectiveDateView = false;
        } else {
            this.roleMappingDTO.effectiveDateView = true;
        }
    }

    changeCreateConfigurableMandatoryFields(i) {
        if (this.createConfigurableFields[i].isMandatoryField) {
            this.createConfigurableFields[i].isMandatoryField = false;
        } else {
            this.createConfigurableFields[i].isMandatoryField = true;
        }
    }

    addConfigurableFields() {
        if (this.createConfigurableFields.length > 0) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.createConfigurableFields[this.createConfigurableFields.length - 1].fieldName)) {
                this.toastService.error("Enter Field Name")
                return false;
            }
            if (this.utilityService.isNullOrEmptyOrUndefined(this.createConfigurableFields[this.createConfigurableFields.length - 1].sourceApi)) {
                this.toastService.error("Enter Api")
                return false;
            }
            if (this.utilityService.isNullOrEmptyOrUndefined(this.createConfigurableFields[this.createConfigurableFields.length - 1].displayValue)) {
                this.toastService.error("Enter DisplayValue")
                return false;
            }
            if (this.utilityService.isNullOrEmptyOrUndefined(this.createConfigurableFields[this.createConfigurableFields.length - 1].fieldTitle)) {
                this.toastService.error("Enter FieldTitle")
                return false;
            }
        }
        this.createConfigurableFields.push({});
    }

    removeConfigurableField(i) {
        this.createConfigurableFields.splice(i, 1);
    }

    fetchApi() {
        this.http.get<any>("api").subscribe(data => {
            this.apiList = data.payload.apiList;
            this.dataService = this.completerService.local(this.apiList, 'apiName', 'apiName');
            setTimeout(() => {
                this.selectRefresh();
            }, 100);
        })
    }

    selectApi(apiId, i) {
        if (apiId != null) {
            this.apiList.forEach(item => {
                if (item.id == apiId) {
                    this.createConfigurableFields[i].sourceApi = item.id;
                    this.createConfigurableFields[i].sourceApiName = item.apiName;
                }
            })
        }
    }

    selectApiValue(event) {
        if (event.originalObject != null) {
            this.duplicateEmpCheck.sourceApi = event.originalObject;
            this.duplicateEmpCheck.sourceApiName = event.originalObject.apiName;
        }
    }

    fetchActions() {
        this.http.get<any>("action").subscribe(data => {
            this.actionList = data.payload.actionList;
            this.selectRefresh();
        })
    }

    onChangeEvent(actionEvent) {
        if (actionEvent == 'event') {
            this.eventFlag = true;
            this.actionFlag = false;
        } else if (actionEvent == 'action') {
            this.actionFlag = true;
            this.eventFlag = false;
        }

        this.selectRefresh();
    }

    changeOneTimeUpdate() {
        if (this.roleMappingDTO.oneTimeUpdate == undefined) {
            this.roleMappingDTO.oneTimeUpdate = false;
        }

        if (this.roleMappingDTO.updatedDataView == undefined) {
            this.roleMappingDTO.updatedDataView = false;
        }

        if (this.roleMappingDTO.oneTimeUpdate) {
            this.roleMappingDTO.oneTimeUpdate = false;
        } else {
            if (this.roleMappingDTO.updatedDataView) {
                this.roleMappingDTO.updatedDataView = false;
            }
            this.roleMappingDTO.oneTimeUpdate = true;
        }
    }

    changeMultipleUpdateView() {
        if (this.roleMappingDTO.oneTimeUpdate == undefined) {
            this.roleMappingDTO.oneTimeUpdate = false;
        }

        if (this.roleMappingDTO.updatedDataView == undefined) {
            this.roleMappingDTO.updatedDataView = false;
        }

        if (this.roleMappingDTO.updatedDataView) {
            this.roleMappingDTO.updatedDataView = false;
        } else {
            if (this.roleMappingDTO.oneTimeUpdate) {
                this.roleMappingDTO.oneTimeUpdate = false;
            }
            this.roleMappingDTO.updatedDataView = true;
        }
    }

    onItemSelect(selected: any) {
        if (this.utilityService.isNullOrUndefined(selected)) {
            this.roleMappingDTO.employeeGlobalId = null;
        } else {
            this.roleMappingDTO.employeeGlobalId = selected;
        }
    }

    getAutoComplete(event: any) {
        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.roleMappingDTO.employeeGlobalId) && this.roleMappingDTO.employeeGlobalId.length == 0 && event.code == "Backspace") {
            this.roleMappingDTO.employeeGlobalId = null;
            this.roleMappingDTO.employeeGlobalId = null;
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.roleMappingDTO.countryCode) && this.utilityService.isNotNullOrEmptyOrUndefined(this.roleMappingDTO.businessUnitCode)) {
            //autoCompleteEmployee
            var url = "auto-complete?"
            url = url + "countryCode=" + this.roleMappingDTO.countryCode + "&businessUnitCode=" + this.roleMappingDTO.businessUnitCode + "&searchKey=" + event.term;

            this.http.get(url).subscribe(res => {
                this.suggestions = res;
            }, err => {
            });
        }
    }

    resolvePattern(data) {
        var patt = "{employeeGlobalId}-{preferredName}";
        let result = patt.replace(/\{\S+?\}/g, function (str, offset, input) {
            var key = str.replace('{', '');
            key = key.replace('}', '');
            if (data[key] == null || data[key] == undefined) {
                var empty = "";
                return empty;
            }
            else {
                return data[key];
            }
        });
        return result;
    }

    customSearchFn(term: string, item: any) {
        term = term.toUpperCase();

        const list = Object.values<string>(item).filter(word => {
            if (typeof (word) == "string") {
                if (word.toUpperCase() != null && word != undefined && word.toUpperCase().match(term) != null) {
                    return item;
                }
            }
        });
        return (list.length != 0);
    }


    /****************************** Start: Custom Field Configuration ***********************************/

    openCustomFieldModal() {
        this.closeTemporaryModal();

        var elemodal = document.getElementById('customFieldModal');
        this.customFieldModalInstance = M.Modal.init(elemodal, {});
        this.customFieldModalInstance.open();
    }

    closeCustomFieldModal() {
        var elemodal = document.getElementById('customFieldModal');
        this.customFieldModalInstance = M.Modal.init(elemodal, {});
        this.customFieldModalInstance.close();

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.customFieldsConfiguration)) {
            this.roleMappingDTO.customFieldsConfiguration = JSON.stringify(this.customFieldsConfiguration);
        }

        this.openModal(this.roleMappingDTO);
    }

    addCustomFields() {
        if (this.customFieldsConfiguration.length > 0) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.customFieldsConfiguration[this.customFieldsConfiguration.length - 1].customFieldType)) {
                this.toastService.error("Enter Custom Field Type");
                return false;
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.customFieldsConfiguration[this.customFieldsConfiguration.length - 1].fieldName)) {
                this.toastService.error("Enter Field Name");
                return false;
            }
        }

        if (this.customFieldsConfiguration.length < 4)
            this.customFieldsConfiguration.push({});
    }

    removeCustomField(i) {
        this.customFieldsConfiguration.splice(i, 1);
    }

    onCustomFieldTypeSelect(customFieldType, idx) {
        for (var index = 0; index < this.customFieldsConfiguration.length; index++) {
            if (this.customFieldsConfiguration[index].customFieldType == customFieldType && index != idx) {
                this.customFieldsConfiguration[idx] = {};
                this.toastService.error("Already Selected");
                this.selectRefresh();
                return false;
            }
        }
    }

    saveCustomFieldConfiguration() {
        let flag = true;
        this.customFieldsConfiguration.forEach(item => {
            if (this.utilityService.isNullOrEmptyOrUndefined(item.customFieldType) || this.utilityService.isNullOrEmptyOrUndefined(item.fieldName)) {
                this.toastService.error("Complete Configuration");
                flag = false;
                return;
            }
        });


        if (flag)
            this.closeCustomFieldModal();
    }

    /****************************** End: Custom Field Configuration ***********************************/



    /****************************** Start: Notification Configuration ***********************************/

    selectEmailNotificationType() {
        this.approvalEmailNotificationModalInstance;
        this.emailNotificationModalInstance;
        this.addButtonFlag = false;
        this.emailStatus = true;

        setTimeout(() => {
            this.openEmailModal(this.roleMappingDTO);
        }, 100);

        if (this.emailNotificationType) {
            var elemodal = document.getElementById('approvalEmailNotificationModal');
            this.approvalEmailNotificationModalInstance = M.Modal.init(elemodal, {});
            this.approvalEmailNotificationModalInstance.close();
        } else {
            var elemodal = document.getElementById('emailNotificationModal');
            this.emailNotificationModalInstance = M.Modal.init(elemodal, {});
            this.emailNotificationModalInstance.close();
        }

    }

    selectNeosuitNotificationType() {
        setTimeout(() => {
            this.openNeosuiteNotificationModal(this.roleMappingDTO);
        }, 100);

        if (this.neosuitNotificationType) {
            var elemodal = document.getElementById('approvalNeosuiteNotificationModal');
            this.approvalNeosuiteNotificationModalInstance = M.Modal.init(elemodal, {});
            this.approvalNeosuiteNotificationModalInstance.close();
        } else {
            var elemodal = document.getElementById('neosuiteNotificationModal');
            this.neosuiteNotificationModalInstance = M.Modal.init(elemodal, {});
            this.neosuiteNotificationModalInstance.close();
        }
    }

    /************************************** Start: Email Notification ***********************************/

    openEmailModal(roleConfig) {
        if (!this.emailStatus) {//checks for the first time only
            roleConfig.emailApprovalSatus = false;
        }

        if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.notification)) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(JSON.parse(roleConfig.notification).mails))
            if (JSON.parse(roleConfig.notification).mails[0].to.length == 0) {
                if (roleConfig.emailApprovalSatus == false) {
                    roleConfig.emailApprovalSatus = true;
                    this.emailNotificationType = true;
                } else {
                    roleConfig.emailApprovalSatus = false;
                    this.emailNotificationType = false;
                }
            }
            else {
                if (roleConfig.emailApprovalSatus == false) {
                    roleConfig.emailApprovalSatus = true;
                    this.emailNotificationType = false;
                } else {
                    roleConfig.emailApprovalSatus = false;
                    this.emailNotificationType = true;
                }
            }
        }
        this.closeTemporaryModal();
        this.inputVariabledToAndCCInitialization();
        this.singleRole.roleIdentifier = 'approved';
        this.selectMailType(this.singleRole.roleIdentifier);

        if (!this.emailNotificationType) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.notification)) {
                this.notification = JSON.parse(roleConfig.notification);

                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification)) {
                    this.notification = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails)) {
                    this.notification.mails = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[0])) {
                    this.notification.mails[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[0].to)) {
                    this.notification.mails[0].to = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[0].cc)) {
                    this.notification.mails[0].cc = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[0].bcc)) {
                    this.notification.mails[0].bcc = [];
                }

                setTimeout(() => {
                    this.iterateNotification(this.notification);
                }, 1000);
            } else {
                this.initializeEmails();
            }
        } else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.approvalNotification)) {
                this.approvalNotification = JSON.parse(roleConfig.approvalNotification);

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.approved)) {
                    this.approvalNotification.approved = {};
                }
                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.approved.mails)) {
                    this.approvalNotification.approved.mails = [];
                }
                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.approved.mails[0])) {
                    this.approvalNotification.approved.mails[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.rejected)) {
                    this.approvalNotification.rejected = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.rejected.mails)) {
                    this.approvalNotification.rejected.mails = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.rejected.mails[0])) {
                    this.approvalNotification.rejected.mails[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.cancelled)) {
                    this.approvalNotification.cancelled = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.cancelled.mails)) {
                    this.approvalNotification.cancelled.mails = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.cancelled.mails[0])) {
                    this.approvalNotification.cancelled.mails[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.escalation)) {
                    this.approvalNotification.escalation = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.escalation.mails)) {
                    this.approvalNotification.escalation.mails = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.escalation.mails[0])) {
                    this.approvalNotification.escalation.mails[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.reminder)) {
                    this.approvalNotification.reminder = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.reminder.mails)) {
                    this.approvalNotification.reminder.mails = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification.reminder.mails[0])) {
                    this.approvalNotification.reminder.mails[0] = {};
                }

                setTimeout(() => {
                    this.iterateNotification(this.approvalNotification);
                }, 1000);
            } else {
                this.initializeEmails();
            }
        }

        if (this.emailNotificationType) {
            this.emailNotificationModal = false;
            this.approvalEmailNotificationModal = true;

            setTimeout(function () {
                var elemodal = document.getElementById('approvalEmailNotificationModal');
                this.approvalEmailNotificationModalInstance = M.Modal.init(elemodal, {});
                this.approvalEmailNotificationModalInstance.open();

                var elems = document.querySelectorAll('.collapsible');
                var instances = M.Collapsible.init(elems, {});

                M.updateTextFields();
            }, 10);
        } else {
            this.emailNotificationModal = true;
            this.approvalEmailNotificationModal = false;

            setTimeout(function () {
                var elemodal = document.getElementById('emailNotificationModal');
                this.emailNotificationModalInstance = M.Modal.init(elemodal, {});
                this.emailNotificationModalInstance.open();

                var elems = document.querySelectorAll('.collapsible');
                var instances = M.Collapsible.init(elems, {});

                M.updateTextFields();
            }, 10);

        }
    }

    inputVariabledToAndCCInitialization() {
        if (!this.emailNotificationType) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo)) {
                this.inputVariableTo = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC)) {
                this.inputVariableCC = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC)) {
                this.inputVariableBCC = [];
            }

            this.inputVariableTo.push([]);
            this.inputVariableCC.push([]);
            this.inputVariableBCC.push([]);
        } else {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo.approved)) {
                this.inputVariableTo.approved = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC.approved)) {
                this.inputVariableCC.approved = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC.approved)) {
                this.inputVariableBCC.approved = [];
            }

            this.inputVariableTo.approved.push([]);
            this.inputVariableCC.approved.push([]);
            this.inputVariableBCC.approved.push([]);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo.rejected)) {
                this.inputVariableTo.rejected = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC.rejected)) {
                this.inputVariableCC.rejected = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC.rejected)) {
                this.inputVariableBCC.rejected = [];
            }

            this.inputVariableTo.rejected.push([]);
            this.inputVariableCC.rejected.push([]);
            this.inputVariableBCC.rejected.push([]);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo.cancelled)) {
                this.inputVariableTo.cancelled = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC.cancelled)) {
                this.inputVariableCC.cancelled = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC.cancelled)) {
                this.inputVariableBCC.cancelled = [];
            }

            this.inputVariableTo.cancelled.push([]);
            this.inputVariableCC.cancelled.push([]);
            this.inputVariableBCC.cancelled.push([]);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo.escalation)) {
                this.inputVariableTo.escalation = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC.escalation)) {
                this.inputVariableCC.escalation = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC.escalation)) {
                this.inputVariableBCC.escalation = [];
            }

            this.inputVariableTo.escalation.push([]);
            this.inputVariableCC.escalation.push([]);
            this.inputVariableBCC.escalation.push([]);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo.reminder)) {
                this.inputVariableTo.reminder = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC.reminder)) {
                this.inputVariableCC.reminder = [];
            }

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC.reminder)) {
                this.inputVariableBCC.reminder = [];
            }

            this.inputVariableTo.reminder.push([]);
            this.inputVariableCC.reminder.push([]);
            this.inputVariableBCC.reminder.push([]);
        }
    }

    initializeEmails() {
        if (!this.emailNotificationType) {
            this.notification = {};
            this.notification.mails = [];
            this.notification.mails[0] = {};
            this.notification.mails[0].to = [];
            this.notification.mails[0].cc = [];
            this.notification.mails[0].bcc = [];
        } else {
            this.approvalNotification.approved = {};
            this.approvalNotification.approved.mails = [];
            this.approvalNotification.approved.mails[0] = {};

            this.approvalNotification.rejected = {};
            this.approvalNotification.rejected.mails = [];
            this.approvalNotification.rejected.mails[0] = {};

            this.approvalNotification.cancelled = {};
            this.approvalNotification.cancelled.mails = [];
            this.approvalNotification.cancelled.mails[0] = {};

            this.approvalNotification.escalation = {};
            this.approvalNotification.escalation.mails = [];
            this.approvalNotification.escalation.mails[0] = {};

            this.approvalNotification.reminder = {};
            this.approvalNotification.reminder.mails = [];
            this.approvalNotification.reminder.mails[0] = {};
        }
    }

    iterateNotification(notification) {
        if (this.emailNotificationType) {
            for (var status in notification) {
                if (this.utilityService.isNotNullOrEmptyOrUndefined(notification[status].mails)) {
                    for (var idx in notification[status].mails) {
                        if (this.utilityService.isNotNullOrEmptyOrUndefined(notification[status].mails[idx])) {
                            if (this.utilityService.isNotNullOrEmptyOrUndefined(notification[status].mails[idx].to)) {
                                this.inputVariableTo[status][idx] = notification[status].mails[idx].to;

                                if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[status][idx])) {
                                    this.inputVariableCC[status][idx] = []
                                }

                                if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC[status][idx])) {
                                    this.inputVariableBCC[status][idx] = []
                                }
                            }
                            if (this.utilityService.isNotNullOrEmptyOrUndefined(notification[status].mails[idx].cc)) {
                                this.inputVariableCC[status][idx] = notification[status].mails[idx].cc;

                                if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo[status][idx])) {
                                    this.inputVariableTo[status][idx] = []
                                }

                                if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableBCC[status][idx])) {
                                    this.inputVariableBCC[status][idx] = []
                                }
                            }
                            if (this.utilityService.isNotNullOrEmptyOrUndefined(notification[status].mails[idx].bcc)) {
                                this.inputVariableBCC[status][idx] = notification[status].mails[idx].bcc;

                                if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[status][idx])) {
                                    this.inputVariableCC[status][idx] = []
                                }

                                if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableTo[status][idx])) {
                                    this.inputVariableTo[status][idx] = []
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(notification.mails)) {
                for (var idx in notification.mails) {
                    if (this.utilityService.isNotNullOrEmptyOrUndefined(notification.mails[idx])) {
                        if (this.utilityService.isNotNullOrEmptyOrUndefined(notification.mails[idx].to)) {
                            this.inputVariableTo[idx] = notification.mails[idx].to;

                            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[idx])) {
                                this.inputVariableCC[idx] = []
                            }

                            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[idx])) {
                                this.inputVariableBCC[idx] = []
                            }
                        }

                        if (this.utilityService.isNotNullOrEmptyOrUndefined(notification.mails[idx].cc)) {
                            this.inputVariableCC[idx] = notification.mails[idx].cc;

                            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[idx])) {
                                this.inputVariableTo[idx] = []
                            }

                            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[idx])) {
                                this.inputVariableBCC[idx] = []
                            }
                        }

                        if (this.utilityService.isNotNullOrEmptyOrUndefined(notification.mails[idx].bcc)) {
                            this.inputVariableBCC[idx] = notification.mails[idx].bcc;

                            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[idx])) {
                                this.inputVariableCC[idx] = []
                            }

                            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableCC[idx])) {
                                this.inputVariableTo[idx] = []
                            }
                        }
                    }
                }
            }
        }
    }

    closeEmailModal() {
        if (this.emailNotificationType) {
            var elemodal = document.getElementById('approvalEmailNotificationModal');
            this.approvalEmailNotificationModalInstance = M.Modal.init(elemodal, {});
            this.approvalEmailNotificationModalInstance.close();
            this.approvalEmailNotificationModal = false;
        } else {
            var elemodal = document.getElementById('emailNotificationModal');
            this.emailNotificationModalInstance = M.Modal.init(elemodal, {});
            this.emailNotificationModalInstance.close();
            this.emailNotificationModal = false;
        }

        this.emailNotificationType = false;
        this.openModal(this.roleMappingDTO);
    }

    removeMail(actionRoleIndentifier, idx) {
        if (idx == 0 || idx == undefined) {
            if (this.emailNotificationType)
                this.approvalNotification[actionRoleIndentifier].mails.splice(idx, 1);
            else
                this.notification.mails.splice(idx, 1);
            this.addButtonFlag = true;
        }
        else {
            if (this.emailNotificationType) {
                this.approvalNotification[actionRoleIndentifier].mails.splice(idx, 1);
            } else {
                this.notification.mails.splice(idx, 1);
            }
        }
    }

    addMail(actionRoleIndentifier, idx) {
        if (idx == undefined) {
            idx = 0;
            if (this.emailNotificationType) {
                this.approvalNotification[actionRoleIndentifier].mails.push({});
                this.inputVariableTo[actionRoleIndentifier].push([]);
                this.inputVariableCC[actionRoleIndentifier].push([]);
                this.inputVariableBCC[actionRoleIndentifier].push([]);
                this.addButtonFlag = false;
            }
            else {
                this.notification.mails.push({});
                this.inputVariableTo.push([]);
                this.inputVariableCC.push([]);
                this.inputVariableBCC.push([]);
                this.addButtonFlag = false;
            }
        }
        else {
            if (this.emailNotificationType) {
                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification[actionRoleIndentifier].mails[idx].to)) {
                    this.toastService.error("Select Mail Recipient");
                } else if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification[actionRoleIndentifier].mails[idx].templateCode)) {
                    this.toastService.error("Enter Template Code");
                } else if ((actionRoleIndentifier == 'escalation' || actionRoleIndentifier == 'reminder') && this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification[actionRoleIndentifier].mails[idx].noOfDays)) {
                    this.toastService.error("Select Days");
                } else {
                    this.approvalNotification[actionRoleIndentifier].mails.push({});
                    this.inputVariableTo[actionRoleIndentifier].push([]);
                    this.inputVariableCC[actionRoleIndentifier].push([]);
                    this.inputVariableBCC[actionRoleIndentifier].push([]);
                }
            } else {
                if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[idx].to)) {
                    this.toastService.error("Select Mail Recipient");
                } else if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[idx].templateCode)) {
                    this.toastService.error("Enter Template Code");
                } else {
                    this.notification.mails.push({});
                    this.inputVariableTo.push([]);
                    this.inputVariableCC.push([]);
                    this.inputVariableBCC.push([]);
                }
            }
        }
    }

    chipAdded(actionRoleIndentifier: any, idx, mailConnector, j) {
        if (this.emailNotificationType) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNotification[actionRoleIndentifier].mails[idx][mailConnector])) {
                this.approvalNotification[actionRoleIndentifier].mails[idx][mailConnector] = []
            }

            if (mailConnector == 'to') {
                this.approvalNotification[actionRoleIndentifier].mails[idx][mailConnector].push(this.inputVariableTo[actionRoleIndentifier][idx][j]);
                this.inputVariableTo[actionRoleIndentifier][idx][j] = "";
            } else if (mailConnector == 'cc') {
                this.approvalNotification[actionRoleIndentifier].mails[idx][mailConnector].push(this.inputVariableCC[actionRoleIndentifier][idx][j]);
                this.inputVariableCC[actionRoleIndentifier][idx][j] = "";
            }
            else if (mailConnector == 'bcc') {
                this.approvalNotification[actionRoleIndentifier].mails[idx][mailConnector].push(this.inputVariableBCC[actionRoleIndentifier][idx][j]);
                this.inputVariableBCC[actionRoleIndentifier][idx][j] = "";
            }

        } else {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.notification.mails[idx][mailConnector])) {
                this.notification.mails[idx][mailConnector] = []
            }

            if (mailConnector == 'to') {
                this.notification.mails[idx][mailConnector].push(this.inputVariableTo[idx][j]);
                this.inputVariableTo[idx][j] = "";
            } else if (mailConnector == 'cc') {
                this.notification.mails[idx][mailConnector].push(this.inputVariableCC[idx][j]);
                this.inputVariableCC[idx][j] = "";
            }
            else if (mailConnector == 'bcc') {
                this.notification.mails[idx][mailConnector].push(this.inputVariableBCC[idx][j]);
                this.inputVariableBCC[idx][j] = "";
            }
        }

        setTimeout(() => {
            $('select').formSelect();
        }, 10);
    }

    chipRemoved(actionRoleIndentifier: any, idx, mailConnector, j) {
        if (this.emailNotificationType) {
            this.approvalNotification[actionRoleIndentifier].mails[idx][mailConnector].splice(j, 1);
        }
        else {
            this.notification.mails[idx][mailConnector].splice(j, 1);
        }
    }

    saveEmailConfiguration() {
        if (this.emailNotificationType) {
            var particularRoles = this.singleRole.roleIdentifier;
            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.approvalNotification)) {
                for (var roles of this.allActionRoles) {
                    if (roles.roleIdentifier == particularRoles) {
                        if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.approvalNotification[roles.roleIdentifier].mails)) {
                            for (var mail of this.approvalNotification[roles.roleIdentifier].mails) {
                                if (roles.roleIdentifier == 'escalation' || roles.roleIdentifier == 'reminder') {
                                    if (this.utilityService.isNullOrEmptyOrUndefined(mail.to) || this.utilityService.isNullOrEmptyOrUndefined(mail.templateCode) || this.utilityService.isNullOrEmptyOrUndefined(mail.noOfDays)) {
                                        this.toastService.error("Complete Email Configuration")
                                        return false;
                                    }
                                } else {
                                    if (this.utilityService.isNullOrEmptyOrUndefined(mail.to) || this.utilityService.isNullOrEmptyOrUndefined(mail.templateCode)) {
                                        this.toastService.error("Complete Email Configuration")
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }

                this.roleMappingDTO.approvalNotification = JSON.stringify(this.approvalNotification);
            }
        }
        else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.notification)) {
                if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.notification.mails)) {
                    for (var mail of this.notification.mails) {
                        if (this.utilityService.isNullOrEmptyOrUndefined(mail.to) || this.utilityService.isNullOrEmptyOrUndefined(mail.templateCode)) {
                            this.toastService.error("Complete Email Configuration")
                            return false;
                        }
                    }
                }
                this.roleMappingDTO.notification = JSON.stringify(this.notification)
            }
        }
        this.closeEmailModal();
    }


    changeEscalations(roleIdentifier, idx, data) {
        this.approvalNotification[roleIdentifier].mails[idx].noOfDays = null;
        this.selectRefresh();
    }

    selectMailType(status) {
        this.singleRole.roleIdentifier = status;

        if (this.utilityService.isNotNullOrEmptyOrUndefined(status)) {
            this.singleRole.roleIdentifier = status;
            this.allActionRoles.forEach(item => {
                if (status == item.roleIdentifier)
                    this.flag[item.roleIdentifier] = true;
                else
                    this.flag[item.roleIdentifier] = false;
            });
        }
    }

    onDaysSelection(days, index, roleIdentifier, event) {
        if (index > 0) {
            if (this.approvalNotification[roleIdentifier].mails[index - 1].noOfDays >= days) {
                setTimeout(() => {
                    this.approvalNotification[roleIdentifier].mails[index].noOfDays = null;
                    return this.toastService.error("Select Greater value");
                }, 10);
            }
        }
    }

    /************************************** End: Email Notification ***********************************/



    /************************************** Start: Neosuit Notification *********************************/

    openNeosuiteNotificationModal(roleConfig) {
        this.closeTemporaryModal();
        this.inputVariabledNotificationsToInitialization();
        this.singleRole.roleIdentifier = 'approved';
        this.selectNotificationType(this.singleRole.roleIdentifier);

        if (this.neosuitNotificationType) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.approvalNeosuiteNotifications)) {
                this.approvalNeosuiteNotifications = JSON.parse(roleConfig.approvalNeosuiteNotifications);

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.approved)) {
                    this.approvalNeosuiteNotifications.approved = {};
                }
                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.approved.notifications)) {
                    this.approvalNeosuiteNotifications.approved.notifications = [];
                }
                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.approved.notifications[0])) {
                    this.approvalNeosuiteNotifications.approved.notifications[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.rejected)) {
                    this.approvalNeosuiteNotifications.rejected = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.rejected.notifications)) {
                    this.approvalNeosuiteNotifications.rejected.notifications = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.rejected.notifications[0])) {
                    this.approvalNeosuiteNotifications.rejected.notifications[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.cancelled)) {
                    this.approvalNeosuiteNotifications.cancelled = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.cancelled.notifications)) {
                    this.approvalNeosuiteNotifications.cancelled.notifications = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications.cancelled.notifications[0])) {
                    this.approvalNeosuiteNotifications.cancelled.notifications[0] = {};
                }

                this.iterateNeosuiteNotification(this.approvalNeosuiteNotifications);
            } else {
                this.initializeNeosuiteNotifications();
            }
        } else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(roleConfig.neosuiteNotifications)) {
                this.neosuiteNotifications = JSON.parse(roleConfig.neosuiteNotifications);

                if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications)) {
                    this.neosuiteNotifications = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications.notifications)) {
                    this.neosuiteNotifications.notifications = [];
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications.notifications[0])) {
                    this.neosuiteNotifications.notifications[0] = {};
                }

                if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications.notifications[0].to)) {
                    this.neosuiteNotifications.notifications[0].to = [];
                }

                this.iterateNeosuiteNotification(this.neosuiteNotifications);
            } else {
                this.initializeNeosuiteNotifications();
            }
        }

        if (this.neosuitNotificationType) {
            this.approvalNeosuiteNotificationModal = true;
            this.neosuiteNotificationModal = false;

            setTimeout(function () {
                var elemodal = document.getElementById('approvalNeosuiteNotificationModal');
                this.approvalNeosuiteNotificationModalInstance = M.Modal.init(elemodal, {});
                this.approvalNeosuiteNotificationModalInstance.open();

                var elems = document.querySelectorAll('.collapsible');
                var instances = M.Collapsible.init(elems, {});

                M.updateTextFields();
            }, 10);
        } else {
            this.approvalNeosuiteNotificationModal = false;
            this.neosuiteNotificationModal = true;

            setTimeout(function () {
                var elemodal = document.getElementById('neosuiteNotificationModal');
                this.neosuiteNotificationModalInstance = M.Modal.init(elemodal, {});
                this.neosuiteNotificationModalInstance.open();

                M.updateTextFields();
            }, 10);
        }
    }

    closeNeosuiteNotificationModal() {
        if (this.neosuitNotificationType) {
            var elemodal = document.getElementById('approvalNeosuiteNotificationModal');
            var modalInstance = M.Modal.init(elemodal, {});
            modalInstance.close();
        } else {
            var elemodal = document.getElementById('neosuiteNotificationModal');
            var modalInstance = M.Modal.init(elemodal, {});
            modalInstance.close();
        }

        this.neosuitNotificationType = false;
        this.openModal(this.roleMappingDTO);
    }

    removeNeosuiteNotification(actionRoleIndentifier, idx) {
        if (this.neosuitNotificationType) {
            this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications.splice(idx, 1);
        } else {
            this.neosuiteNotifications.notifications.splice(idx, 1);
        }
    }

    addNeosuiteNotification(actionRoleIndentifier, idx) {
        if (this.neosuitNotificationType) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications[idx].to)) {
                this.toastService.error("Enter Notification Recipient");
            } else if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications[idx].notifyValue)) {
                this.toastService.error("Enter Notify Value");
            } else {
                this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications.push({});
                this.inputVariableNotificationTo[actionRoleIndentifier].push([]);
            }
        } else {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications.notifications[idx].to)) {
                this.toastService.error("Enter the Notification Recipient");
            } else if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications.notifications[idx].notifyValue)) {
                this.toastService.error("Enter Notfiy Value");
            } else {
                this.neosuiteNotifications.notifications.push({});
                this.inputVariableNotificationTo.push([]);
            }
        }
    }

    notificationChipAdded(actionRoleIndentifier: any, idx, mailConnector, j) {
        if (this.neosuitNotificationType) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications[idx][mailConnector])) {
                this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications[idx][mailConnector] = []
            }

            if (mailConnector == 'to') {
                this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications[idx][mailConnector].push(this.inputVariableNotificationTo[actionRoleIndentifier][idx][j]);
                this.inputVariableNotificationTo[actionRoleIndentifier][idx][j] = "";
            }
        } else {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.neosuiteNotifications.notifications[idx][mailConnector])) {
                this.neosuiteNotifications.notifications[idx][mailConnector] = []
            }

            if (mailConnector == 'to') {
                this.neosuiteNotifications.notifications[idx][mailConnector].push(this.inputVariableNotificationTo[idx][j]);
                this.inputVariableNotificationTo[idx][j] = "";
            }
        }

        setTimeout(() => {
            $('select').formSelect();
        }, 10);
    }

    notificationChipRemoved(actionRoleIndentifier: any, idx, mailConnector, j) {
        if (this.neosuitNotificationType) {
            this.approvalNeosuiteNotifications[actionRoleIndentifier].notifications[idx][mailConnector].splice(j, 1);
        }
        else {
            this.neosuiteNotifications.notifications[idx][mailConnector].splice(j, 1);
        }
    }

    saveNeosuiteNotificationConfiguration() {
        if (!this.neosuitNotificationType) {
            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.neosuiteNotifications)) {
                if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.neosuiteNotifications.notifications)) {
                    for (var notification of this.neosuiteNotifications.notifications) {
                        if (this.utilityService.isNullOrEmptyOrUndefined(notification.to) || this.utilityService.isNullOrEmptyOrUndefined(notification.notifyValue)) {
                            this.toastService.error("Complete Notification Configuration")
                            return false;
                        }
                    }
                }
            }
            this.roleMappingDTO.neosuiteNotifications = JSON.stringify(this.neosuiteNotifications)
        } else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined2(this.approvalNeosuiteNotifications)) {
                this.roleMappingDTO.approvalNeosuiteNotifications = JSON.stringify(this.approvalNeosuiteNotifications)
            }
        }
        this.closeNeosuiteNotificationModal();
    }

    iterateNeosuiteNotification(neosuiteNotifications) {
        if (this.neosuitNotificationType) {
            for (var status in neosuiteNotifications) {
                if (this.utilityService.isNotNullOrEmptyOrUndefined(neosuiteNotifications[status].notifications)) {
                    for (var idx in neosuiteNotifications[status].notifications) {
                        if (this.utilityService.isNotNullOrEmptyOrUndefined(neosuiteNotifications[status].notifications[idx])) {
                            if (this.utilityService.isNotNullOrEmptyOrUndefined(neosuiteNotifications[status].notifications[idx].to)) {
                                this.inputVariableNotificationTo[status][idx] = neosuiteNotifications[status].notifications[idx].to;
                            }
                        }
                    }
                }
            }
        } else {
            if (this.utilityService.isNotNullOrEmptyOrUndefined(neosuiteNotifications.notifications)) {
                for (var idx in neosuiteNotifications.notifications) {
                    if (this.utilityService.isNotNullOrEmptyOrUndefined(neosuiteNotifications.notifications[idx])) {
                        if (this.utilityService.isNotNullOrEmptyOrUndefined(neosuiteNotifications.notifications[idx].to)) {
                            this.inputVariableNotificationTo[idx] = neosuiteNotifications.notifications[idx].to;
                        }
                    }
                }
            }
        }
    }

    inputVariabledNotificationsToInitialization() {
        if (this.neosuitNotificationType) {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableNotificationTo.approved)) {
                this.inputVariableNotificationTo.approved = [];
            }
            this.inputVariableNotificationTo.approved.push([]);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableNotificationTo.rejected)) {
                this.inputVariableNotificationTo.rejected = [];
            }

            this.inputVariableNotificationTo.rejected.push([]);

            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableNotificationTo.cancelled)) {
                this.inputVariableNotificationTo.cancelled = [];
            }

            this.inputVariableNotificationTo.cancelled.push([]);
        }
        else {
            if (this.utilityService.isNullOrEmptyOrUndefined(this.inputVariableNotificationTo)) {
                this.inputVariableNotificationTo = [];
            }
            this.inputVariableNotificationTo.push([]);
        }
    }

    initializeNeosuiteNotifications() {
        if (this.neosuitNotificationType) {
            this.approvalNeosuiteNotifications.approved = {};
            this.approvalNeosuiteNotifications.approved.notifications = [];
            this.approvalNeosuiteNotifications.approved.notifications[0] = {};

            this.approvalNeosuiteNotifications.rejected = {};
            this.approvalNeosuiteNotifications.rejected.notifications = [];
            this.approvalNeosuiteNotifications.rejected.notifications[0] = {};

            this.approvalNeosuiteNotifications.cancelled = {};
            this.approvalNeosuiteNotifications.cancelled.notifications = [];
            this.approvalNeosuiteNotifications.cancelled.notifications[0] = {};
        } else {
            this.neosuiteNotifications = {};
            this.neosuiteNotifications.notifications = [];
            this.neosuiteNotifications.notifications[0] = {};
            this.neosuiteNotifications.notifications[0].to = [];
        }
    }

    selectNotificationType(status) {
        this.singleRole.roleIdentifier = null;

        if (this.utilityService.isNotNullOrEmptyOrUndefined(status)) {
            this.singleRole.roleIdentifier = status;
            this.allActionRoles.forEach(item => {
                if (status == item.roleIdentifier)
                    this.flag[item.roleIdentifier] = true;
                else
                    this.flag[item.roleIdentifier] = false;
            });
        }
    }

	candidateLoad() {
        debugger
        if (this.roleMappingDTO.candidateMerge) {
            this.roleMappingDTO.candidateMerge = false;
            this.roleMappingDTO.candidateAPI = null;
        } else {
            this.roleMappingDTO.candidateMerge = true;
        }
	}

	

	/* setAPI(apiCode) {
		if (this.utilityService.isNotNullOrEmptyOrUndefined(apiCode)) {
            this.roleMappingDTO.candidateAPI = apiCode;
        } else {
            this.roleMappingDTO.candidateAPI = null;
        }
	} */


    /************************************** End: Neosuit Notification ***********************************/


    /****************************** End: Notification Configuration ***********************************/

    /************************Open NeoConfig Modal****************** */
    openNeoConfigModal() {
        this.viewNeoConfig = true;
    }

    triggered($event){
        this.viewNeoConfig = $event;
    }


    /*****************************To Download Record from listview******************************** */
    generateUrl(res) {

        if (this.utilityService.isNullOrEmptyOrUndefined(res)) {
            this.toastService.error("Please Select Records")
        }
        else {
            for (let log of res) {
                log.id = null;  
                this.roleConfigArray.push(log);
            }
            var array = JSON.stringify(this.roleConfigArray)
            this.dyanmicDownloadByHtmlTag({
                fileName: 'Role_Configuration.json',
                text: array
            });

        }
    }

    private setting = {
        element: {
            dynamicDownload: null as HTMLElement
        }
    }

    private dyanmicDownloadByHtmlTag(arg: {
        fileName: string,
        text: any
    }) {
        if (!this.setting.element.dynamicDownload) {
            this.setting.element.dynamicDownload = document.createElement('a');
        }
        const element = this.setting.element.dynamicDownload;
        element.setAttribute('href', `data:${'text/plain'};charset=utf-8,${encodeURIComponent(arg.text)}`);
        element.setAttribute('download', arg.fileName);
        var event = new MouseEvent("click");
        element.dispatchEvent(event);
        this.roleConfigArray = [];
    }

    /****************************Import File********************************* */
    fileChanged(event: any) {

        const reader = new FileReader();
        reader.readAsText(event.target.files[0]);
        reader.onload = () => {
            this.uploadFile = reader.result;
        }
    }

    openUploadModal() {

        var elem = document.getElementById("uploadModal");
        var instance = M.Modal.init(elem, {});
        instance.open();
    }

    closeUploadModal() {
        var elemodal = document.getElementById('uploadModal');
        var instance = M.Modal.init(elemodal, {});
        instance.close();
        this.roleConfigArray = [];
        $(".file-upload").val("");
    }

    onUpload() {

        if (this.utilityService.isNotNullOrEmptyOrUndefined(this.uploadFile)) {
            try {
                this.roleConfigArray = JSON.parse(this.uploadFile);

                if (this.utilityService.isNotNullOrEmptyOrUndefined(this.roleConfigArray)) {
                    //saveJsonConfigurationMapping
                    this.http.patch<any>("role", this.roleConfigArray).subscribe(data => {

                        this.closeUploadModal();
                        $(".file-upload").val("");
                  

                        this.fetchAllRoleConfiguration();
                        this.roleConfigArray = [];
                        this.uploadFile = null;
                    }, err => {
                        $(".file-upload").val("");
                        this.roleConfigArray = [];
                        this.uploadFile = null;
                        this.closeUploadModal();
                    });
                }
            }
            catch {
                this.toastService.error("No JSON File Found");
                $(".file-upload").val("");
            }
        }
        else {
            this.toastService.error("Choose File")
        }


    }
    /******************************************************************** */
    /* Future Dated configuration Starts */
    onFutureDatedChanges() {
        
        if(!this.futureDated) this.futureDated = true;
        else {this.futureDated = false;
            this.roleMappingDTO.futureDatedApi = {};
        }
        
    }

    onFutureDatedSelected(event) {  
         
        if(this.utilityService.isNotNullOrEmptyOrUndefined(event)) { 
            this.roleMappingDTO.futureDatedApi.id = event.id;
            this.roleMappingDTO.futureDatedApi.listConfigName = event.listConfigName;
            //this.roleMappingDTO.futureDatedApiId = event.id;
        } else {
            this.roleMappingDTO.futureDatedApiId = null;
            this.roleMappingDTO.futureDatedApiName = ""; 
        }
    }

    /* Future Dated configuration ends */

    convoAI(){
        const ele = document.getElementById("convoAI") as HTMLInputElement;
        if (ele.checked) {
            this.selectedConvoAI = true;
            this.roleMappingDTO.convoAI = true;
        } else {
            this.selectedConvoAI = false;
            this.roleMappingDTO.convoAI = false;
        }
    }

}
